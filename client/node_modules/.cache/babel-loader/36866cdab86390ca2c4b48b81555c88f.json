{"ast":null,"code":"import _regeneratorRuntime from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\n\nvar Clarifai = require('clarifai');\n\nexport var analyzeImage = function analyzeImage(url) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var app, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                app = new Clarifai.App({\n                  apiKey: 'bd8644854b19417dacdfa3adba21aab1'\n                });\n                _context.prev = 1;\n                _context.next = 4;\n                return app.models.predict(Clarifai.COLOR_MODEL, url);\n\n              case 4:\n                response = _context.sent;\n                dispatch({\n                  type: 'ANALYZE_IMAGE',\n                  payload: response.outputs[0].data.colors\n                });\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                console.log(_context.t0);\n                dispatch({\n                  type: 'ANALYZE_IMAGE_ERROR',\n                  error: _context.t0.data.status.details\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 8]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var randomImage = function randomImage() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return axios.get('https://api.unsplash.com/photos/random', {\n                  headers: {\n                    Authorization: 'Client-ID 7e3664d943831b0902bdde147b893f182272b23dad6fcf084fb3eaa9d4b0b325'\n                  }\n                });\n\n              case 3:\n                response = _context2.sent;\n                dispatch({\n                  type: 'RANDOM_IMAGE',\n                  url: response.data.urls.regular\n                });\n                _context2.next = 11;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                dispatch({\n                  type: 'RANDOM_IMAGE_ERROR',\n                  error: _context2.t0\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var changeMainImage = function changeMainImage(url) {\n  return {\n    type: 'MAIN_IMAGE',\n    url: url\n  };\n};\nexport var getColorInfo = function getColorInfo(hex) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios.get(\"https://www.thecolorapi.com/id?hex=\".concat(hex));\n\n              case 2:\n                response = _context3.sent;\n                console.log(response);\n                dispatch({\n                  type: 'GET_COLOR_INFO',\n                  payload: response\n                });\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/liufam/Documents/colors-app/src/actions/index.js"],"names":["axios","Clarifai","require","analyzeImage","url","dispatch","app","App","apiKey","models","predict","COLOR_MODEL","response","type","payload","outputs","data","colors","console","log","error","status","details","randomImage","get","headers","Authorization","urls","regular","changeMainImage","getColorInfo","hex"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAS,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,gBAAAA,GAD6B,GACvB,IAAIL,QAAQ,CAACM,GAAb,CAAiB;AAACC,kBAAAA,MAAM,EAAE;AAAT,iBAAjB,CADuB;AAAA;AAAA;AAAA,uBAGVF,GAAG,CAACG,MAAJ,CAAWC,OAAX,CAAmBT,QAAQ,CAACU,WAA5B,EAAyCP,GAAzC,CAHU;;AAAA;AAG3BQ,gBAAAA,QAH2B;AAIjCP,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAE,eADC;AAEPC,kBAAAA,OAAO,EAAEF,QAAQ,CAACG,OAAT,CAAiB,CAAjB,EAAoBC,IAApB,CAAyBC;AAF3B,iBAAD,CAAR;AAJiC;AAAA;;AAAA;AAAA;AAAA;AASjCC,gBAAAA,OAAO,CAACC,GAAR;AACAd,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAE,qBADC;AAEPO,kBAAAA,KAAK,EAAE,YAAIJ,IAAJ,CAASK,MAAT,CAAgBC;AAFhB,iBAAD,CAAR;;AAViC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAiBP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAMlB,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAENL,KAAK,CAACwB,GAAN,CAAU,wCAAV,EAAoD;AACzEC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,aAAa,EAAE;AADR;AADgE,iBAApD,CAFM;;AAAA;AAEvBd,gBAAAA,QAFuB;AAO7BP,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAE,cADC;AAEPT,kBAAAA,GAAG,EAAEQ,QAAQ,CAACI,IAAT,CAAcW,IAAd,CAAmBC;AAFjB,iBAAD,CAAR;AAP6B;AAAA;;AAAA;AAAA;AAAA;AAY7BV,gBAAAA,OAAO,CAACC,GAAR;AACAd,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAE,oBADC;AAEPO,kBAAAA,KAAK;AAFE,iBAAD,CAAR;;AAb6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;AAoBP,OAAO,IAAMS,eAAe,GAAG,SAAlBA,eAAkB,CAAAzB,GAAG,EAAI;AACpC,SAAO;AACLS,IAAAA,IAAI,EAAE,YADD;AAELT,IAAAA,GAAG,EAAEA;AAFA,GAAP;AAID,CALM;AAOP,OAAO,IAAM0B,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAS,kBAAM1B,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACZL,KAAK,CAACwB,GAAN,8CAAgDO,GAAhD,EADY;;AAAA;AAC7BnB,gBAAAA,QAD6B;AAEnCM,gBAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACAP,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAE,gBADC;AAEPC,kBAAAA,OAAO,EAAEF;AAFF,iBAAD,CAAR;;AAHmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB","sourcesContent":["import axios from 'axios';\nconst Clarifai = require('clarifai');\n\nexport const analyzeImage = (url) => async dispatch => {\n  const app = new Clarifai.App({apiKey: 'bd8644854b19417dacdfa3adba21aab1'});\n  try {\n    const response = await app.models.predict(Clarifai.COLOR_MODEL, url);\n    dispatch({\n      type: 'ANALYZE_IMAGE',\n      payload: response.outputs[0].data.colors\n    })\n  } catch(err) {\n    console.log(err);\n    dispatch({\n      type: 'ANALYZE_IMAGE_ERROR',\n      error: err.data.status.details\n    })\n  }\n};\n\nexport const randomImage = () => async dispatch => {\n  try {\n    const response = await axios.get('https://api.unsplash.com/photos/random', {\n      headers: {\n        Authorization: 'Client-ID 7e3664d943831b0902bdde147b893f182272b23dad6fcf084fb3eaa9d4b0b325'\n      }\n    });\n    dispatch({\n      type: 'RANDOM_IMAGE',\n      url: response.data.urls.regular\n    })\n  } catch(err) {\n    console.log(err);\n    dispatch({\n      type: 'RANDOM_IMAGE_ERROR',\n      error: err\n    })\n  }\n};\n\nexport const changeMainImage = url => {\n  return {\n    type: 'MAIN_IMAGE',\n    url: url\n  };\n};\n\nexport const getColorInfo = (hex) => async dispatch => {\n  const response = await axios.get(`https://www.thecolorapi.com/id?hex=${hex}`);\n  console.log(response);\n  dispatch({\n    type: 'GET_COLOR_INFO',\n    payload: response\n  })\n};\n"]},"metadata":{},"sourceType":"module"}