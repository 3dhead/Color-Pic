{"ast":null,"code":"import _classCallCheck from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/liufam/Documents/colors-app/src/components/ColorsList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { getColorInfo } from '../actions';\nimport { Popup } from 'semantic-ui-react';\nimport ColorInfo from './ColorInfo'; // change return numberes to percent\n\nvar toPercent = function toPercent(num) {\n  return Math.floor(num * 100) + '%';\n};\n\nvar ColorsList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ColorsList, _Component);\n\n  function ColorsList() {\n    _classCallCheck(this, ColorsList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColorsList).apply(this, arguments));\n  }\n\n  _createClass(ColorsList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.analyzeImage(this.props.url);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    // Make API call each time the URL changes\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.url !== prevProps.url) {\n        this.props.analyzeImage(this.props.url);\n      }\n\n      ;\n    }\n  }, {\n    key: \"colorsRender\",\n    value: function colorsRender() {\n      var _this = this;\n\n      // if there is no error in request and colors data is returned\n      if (this.props.colors.length === 1) {\n        var sortColors = this.props.colors.sort(function (a, b) {\n          return b.value - a.value;\n        });\n\n        var _ColorsList = sortColors.map(function (color) {\n          return React.createElement(\"div\", {\n            key: color.raw_hex,\n            className: \"color-wrapper\",\n            onClick: function onClick() {\n              return _this.props.getColorInfo(color.raw_hex.slice(1, color.raw_hex.length));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          }, React.createElement(Popup, {\n            trigger: React.createElement(\"div\", {\n              className: \"color-square\",\n              style: {\n                \"backgroundColor\": color.raw_hex\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 36\n              },\n              __self: this\n            }) //fill in color info for content\n            ,\n            content: React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 43\n              },\n              __self: this\n            }, React.createElement(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 44\n              },\n              __self: this\n            }, color.w3c.name), React.createElement(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 45\n              },\n              __self: this\n            }, toPercent(color.value)), React.createElement(ColorInfo, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46\n              },\n              __self: this\n            })),\n            on: \"click\",\n            position: \"top left\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, color.raw_hex));\n        });\n\n        return _ColorsList;\n      } // otherwise return error statement\n\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.props.error);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"right floated center aligned thirteen wide column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.colorsRender());\n    }\n  }]);\n\n  return ColorsList;\n}(Component);\n\n;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    colors: state.colors,\n    url: state.url.url,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  analyzeImage: analyzeImage,\n  getColorInfo: getColorInfo\n})(ColorsList);","map":{"version":3,"sources":["/Users/liufam/Documents/colors-app/src/components/ColorsList.js"],"names":["React","Component","connect","analyzeImage","getColorInfo","Popup","ColorInfo","toPercent","num","Math","floor","ColorsList","props","url","prevProps","colors","length","sortColors","sort","a","b","value","map","color","raw_hex","slice","w3c","name","error","colorsRender","mapStateToProps","state","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { getColorInfo } from '../actions';\nimport { Popup } from 'semantic-ui-react';\nimport ColorInfo from './ColorInfo';\n\n// change return numberes to percent\nconst toPercent = num => {\n  return Math.floor(num*100) + '%';\n}\n\nclass ColorsList extends Component {\n  componentDidMount() {\n    this.props.analyzeImage(this.props.url);\n  };\n  // Make API call each time the URL changes\n  componentDidUpdate(prevProps) {\n    if (this.props.url !== prevProps.url ) {\n      this.props.analyzeImage(this.props.url);\n    };\n  };\n\n  colorsRender() {\n    // if there is no error in request and colors data is returned\n    if (this.props.colors.length === 1) {\n      let sortColors = this.props.colors.sort((a,b) => b.value - a.value);\n      const ColorsList = sortColors.map(color =>\n          <div\n            key={color.raw_hex}\n            className=\"color-wrapper\"\n            onClick={() => this.props.getColorInfo(color.raw_hex.slice(1, color.raw_hex.length))}\n          >\n          <Popup\n            trigger={\n              <div\n                className=\"color-square\"\n                style={{\"backgroundColor\": color.raw_hex}}\n              />\n            }\n            //fill in color info for content\n            content={\n              <div>\n                <p>{color.w3c.name}</p>\n                <p>{toPercent(color.value)}</p>\n                <ColorInfo />\n              </div>\n            }\n            on='click'\n            position='top left'\n          />\n            <p>{color.raw_hex}</p>\n        </div>\n      );\n      return(ColorsList);\n    }\n    // otherwise return error statement\n    return (\n      <div>\n        {this.props.error}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n    <div className=\"right floated center aligned thirteen wide column\">\n      {this.colorsRender()}\n    </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    colors: state.colors,\n    url: state.url.url,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, { analyzeImage, getColorInfo })(ColorsList);\n"]},"metadata":{},"sourceType":"module"}