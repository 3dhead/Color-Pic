{"ast":null,"code":"import _regeneratorRuntime from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\n\nvar Clarifai = require('clarifai');\n\nexport var analyzeImage = function analyzeImage(url) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var app;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                app = new Clarifai.App({\n                  apiKey: 'bd8644854b19417dacdfa3adba21aab1'\n                });\n                axios.get(app.models.predict(Clarifai.COLOR_MODEL, url)).then(function (response) {\n                  dispatch({\n                    type: 'ANALYZE_IMAGE',\n                    payload: response.outputs[0].data.colors\n                  });\n                }).catch(function (err) {\n                  console.log(err);\n                  dispatch({\n                    type: 'ANALYZE_IMAGE_ERROR',\n                    error: err.data.status.details\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //finish error handling in reducer\n\nexport var randomImage = function randomImage() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return axios.get('https://api.unsplash.com/photos/random', {\n                  headers: {\n                    Authorization: 'Client-ID 7e3664d943831b0902bdde147b893f182272b23dad6fcf084fb3eaa9d4b0b325'\n                  }\n                });\n\n              case 3:\n                response = _context2.sent;\n                dispatch({\n                  type: 'RANDOM_IMAGE',\n                  url: response.data.urls.regular\n                });\n                _context2.next = 11;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                dispatch({\n                  type: 'RANDOM_IMAGE_ERROR',\n                  error: _context2.t0\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //add error handling\n\nexport var getColorInfo = function getColorInfo(hex) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios.get(\"https://www.thecolorapi.com/id?hex=\".concat(hex));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: 'GET_COLOR_INFO',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var changeMainImage = function changeMainImage(url) {\n  return {\n    type: 'MAIN_IMAGE',\n    url: url\n  };\n};\nexport var addImageSelection = function addImageSelection(url) {\n  return {\n    type: 'ADD_URL',\n    url: url\n  };\n};","map":{"version":3,"sources":["/Users/liufam/Documents/colors-app/src/actions/index.js"],"names":["axios","Clarifai","require","analyzeImage","url","dispatch","app","App","apiKey","get","models","predict","COLOR_MODEL","then","response","type","payload","outputs","data","colors","catch","err","console","log","error","status","details","randomImage","headers","Authorization","urls","regular","getColorInfo","hex","changeMainImage","addImageSelection"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst Clarifai = require('clarifai');\n\nexport const analyzeImage = (url) => async dispatch => {\n  const app = new Clarifai.App({apiKey: 'bd8644854b19417dacdfa3adba21aab1'});\n    axios.get(app.models.predict(Clarifai.COLOR_MODEL, url))\n    .then(response => {\n      dispatch({\n        type: 'ANALYZE_IMAGE',\n        payload: response.outputs[0].data.colors\n      });\n    })\n    .catch(err => {\n      console.log(err);\n      dispatch({\n        type: 'ANALYZE_IMAGE_ERROR',\n        error: err.data.status.details\n    });\n  })\n};\n//finish error handling in reducer\nexport const randomImage = () => async dispatch => {\n  try {\n    const response = await axios.get('https://api.unsplash.com/photos/random', {\n      headers: {\n        Authorization: 'Client-ID 7e3664d943831b0902bdde147b893f182272b23dad6fcf084fb3eaa9d4b0b325'\n      }\n    });\n    dispatch({\n      type: 'RANDOM_IMAGE',\n      url: response.data.urls.regular\n    })\n  } catch(err) {\n    console.log(err);\n    dispatch({\n      type: 'RANDOM_IMAGE_ERROR',\n      error: err\n    })\n  }\n};\n//add error handling\nexport const getColorInfo = (hex) => async dispatch => {\n  const response = await axios.get(`https://www.thecolorapi.com/id?hex=${hex}`);\n  dispatch({\n    type: 'GET_COLOR_INFO',\n    payload: response.data\n  })\n};\n\nexport const changeMainImage = url => {\n  return {\n    type: 'MAIN_IMAGE',\n    url: url\n  };\n};\n\nexport const addImageSelection = url => {\n  return {\n    type: 'ADD_URL',\n    url: url\n  };\n};\n"]},"metadata":{},"sourceType":"module"}