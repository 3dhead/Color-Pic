{"ast":null,"code":"import _classCallCheck from \"/Users/liufam/Documents/colors-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liufam/Documents/colors-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/liufam/Documents/colors-app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/liufam/Documents/colors-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/liufam/Documents/colors-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/liufam/Documents/colors-app/client/src/components/ColorsList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { getColorInfo } from '../actions';\nimport ColorInfo from './ColorInfo'; // change return numberes to percent\n\nvar ColorsList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ColorsList, _Component);\n\n  function ColorsList() {\n    _classCallCheck(this, ColorsList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColorsList).apply(this, arguments));\n  }\n\n  _createClass(ColorsList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.analyzeImage(this.props.url);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    // Make API call each time the URL changes\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.url !== prevProps.url) {\n        this.props.analyzeImage(this.props.url);\n      }\n\n      ;\n    }\n  }, {\n    key: \"colorsRender\",\n    value: function colorsRender() {\n      // if there is no error in request and colors data is returned\n      if (this.props.colors.length >= 1) {\n        var _ColorsList = this.props.colors.map(function (color) {\n          return React.createElement(\"div\", {\n            key: color,\n            className: \"color-wrapper\" // onClick={() => this.props.getColorInfo(color.slice(1, color.length))}\n            ,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"color-square\",\n            style: {\n              backgroundColor: color\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            },\n            __self: this\n          }, color));\n        });\n\n        return _ColorsList;\n      } // otherwise return error statement\n\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, this.props.error);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"ui container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.colorsRender());\n    }\n  }]);\n\n  return ColorsList;\n}(Component);\n\n;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    colors: state.colors,\n    url: state.url.url,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  analyzeImage: analyzeImage,\n  getColorInfo: getColorInfo\n})(ColorsList);","map":{"version":3,"sources":["/Users/liufam/Documents/colors-app/client/src/components/ColorsList.js"],"names":["React","Component","connect","analyzeImage","getColorInfo","ColorInfo","ColorsList","props","url","prevProps","colors","length","map","color","backgroundColor","error","colorsRender","mapStateToProps","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;;IAEMC,U;;;;;;;;;;;;;wCACgB;AAClB,WAAKC,KAAL,CAAWJ,YAAX,CAAwB,KAAKI,KAAL,CAAWC,GAAnC;AACD;;;AACD;uCACmBC,S,EAAW;AAC5B,UAAI,KAAKF,KAAL,CAAWC,GAAX,KAAmBC,SAAS,CAACD,GAAjC,EAAuC;AACrC,aAAKD,KAAL,CAAWJ,YAAX,CAAwB,KAAKI,KAAL,CAAWC,GAAnC;AACD;;AAAA;AACF;;;mCAEc;AACb;AACA,UAAI,KAAKD,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,IAA2B,CAA/B,EAAkC;AAChC,YAAML,WAAU,GAAG,KAAKC,KAAL,CAAWG,MAAX,CAAkBE,GAAlB,CAAsB,UAAAC,KAAK;AAAA,iBAC1C;AACE,YAAA,GAAG,EAAEA,KADP;AAEE,YAAA,SAAS,EAAC,eAFZ,CAGE;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAKA;AACE,YAAA,SAAS,EAAC,cADZ;AAEE,YAAA,KAAK,EAAE;AAACC,cAAAA,eAAe,EAAED;AAAlB,aAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALA,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGA,KADH,CATA,CAD0C;AAAA,SAA3B,CAAnB;;AAeA,eAAOP,WAAP;AACD,OAnBY,CAoBb;;;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKC,KAAL,CAAWQ,KADd,CADF;AAKD;;;6BAEQ;AACP,aACA;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKC,YAAL,EADH,CADA;AAKD;;;;EA7CsBf,S;;AA8CxB;;AAED,IAAMgB,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLR,IAAAA,MAAM,EAAEQ,KAAK,CAACR,MADT;AAELF,IAAAA,GAAG,EAAEU,KAAK,CAACV,GAAN,CAAUA,GAFV;AAGLO,IAAAA,KAAK,EAAEG,KAAK,CAACH;AAHR,GAAP;AAKD,CAND;;AAQA,eAAeb,OAAO,CAACe,eAAD,EAAkB;AAAEd,EAAAA,YAAY,EAAZA,YAAF;AAAgBC,EAAAA,YAAY,EAAZA;AAAhB,CAAlB,CAAP,CAAyDE,UAAzD,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { getColorInfo } from '../actions';\nimport ColorInfo from './ColorInfo';\n\n// change return numberes to percent\n\nclass ColorsList extends Component {\n  componentDidMount() {\n    this.props.analyzeImage(this.props.url);\n  };\n  // Make API call each time the URL changes\n  componentDidUpdate(prevProps) {\n    if (this.props.url !== prevProps.url ) {\n      this.props.analyzeImage(this.props.url);\n    };\n  };\n\n  colorsRender() {\n    // if there is no error in request and colors data is returned\n    if (this.props.colors.length >=1) {\n      const ColorsList = this.props.colors.map(color =>\n          <div\n            key={color}\n            className=\"color-wrapper\"\n            // onClick={() => this.props.getColorInfo(color.slice(1, color.length))}\n          >\n          <div\n            className=\"color-square\"\n            style={{backgroundColor: color}}\n          />\n          <p>\n            {color}\n          </p>\n        </div>\n      );\n      return(ColorsList);\n    }\n    // otherwise return error statement\n    return (\n      <div>\n        {this.props.error}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n    <div className=\"ui container\">\n      {this.colorsRender()}\n    </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    colors: state.colors,\n    url: state.url.url,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, { analyzeImage, getColorInfo })(ColorsList);\n"]},"metadata":{},"sourceType":"module"}