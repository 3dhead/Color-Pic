{"ast":null,"code":"import _regeneratorRuntime from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/liufam/Documents/colors-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\n\nvar Clarifai = require('clarifai'); //Convert Hex to RGB functions\n\n\nfunction hexToR(h) {\n  return parseInt(cutHex(h).substring(0, 2), 16);\n}\n\nfunction hexToG(h) {\n  return parseInt(cutHex(h).substring(2, 4), 16);\n}\n\nfunction hexToB(h) {\n  return parseInt(cutHex(h).substring(4, 6), 16);\n}\n\nfunction cutHex(h) {\n  return h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n}\n\nexport var analyzeImage = function analyzeImage(url) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var app;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                app = new Clarifai.App({\n                  apiKey: 'bd8644854b19417dacdfa3adba21aab1'\n                });\n                app.models.predict(Clarifai.COLOR_MODEL, url).then(function (response) {\n                  var hexColors = [];\n                  response.outputs[0].data.colors.map(function (color) {\n                    hexColors.push(color.raw_hex);\n                  });\n                  var hexToRGB = [];\n\n                  for (var i = 0; i < hexColors.length; i++) {\n                    var R = hexToR(hexColors[i]);\n                    var G = hexToG(hexColors[i]);\n                    var B = hexToB(hexColors[i]);\n                    hexToRGB.push([R, G, B]);\n                  }\n\n                  ;\n\n                  if (hexToRGB.length > 5) {\n                    hexToRGB = hexToRGB.slice(1, 6);\n                  }\n\n                  ; //2nd call to colormind API\n\n                  axios.post('http://colormind.io/api/', {\n                    model: \"default\",\n                    input: hexToRGB\n                  }).then(function (response) {\n                    console.log(response);\n                    dispatch({\n                      type: 'ANALYZE_IMAGE',\n                      payload: response.data\n                    });\n                  }).catch(function (error) {\n                    console.log(error);\n                  });\n                }).catch(function (err) {\n                  console.log(err);\n                  dispatch({\n                    type: 'ANALYZE_IMAGE_ERROR',\n                    error: err.data.status.details\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //finish error handling in reducer\n\nexport var randomImage = function randomImage() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return axios.get('https://api.unsplash.com/photos/random', {\n                  headers: {\n                    Authorization: 'Client-ID 7e3664d943831b0902bdde147b893f182272b23dad6fcf084fb3eaa9d4b0b325'\n                  }\n                });\n\n              case 3:\n                response = _context2.sent;\n                dispatch({\n                  type: 'RANDOM_IMAGE',\n                  url: response.data.urls.regular\n                });\n                _context2.next = 11;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                dispatch({\n                  type: 'RANDOM_IMAGE_ERROR',\n                  error: _context2.t0\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //add error handling\n\nexport var getColorInfo = function getColorInfo(hex) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios.get(\"https://www.thecolorapi.com/id?hex=\".concat(hex));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: 'GET_COLOR_INFO',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var changeMainImage = function changeMainImage(url) {\n  return {\n    type: 'MAIN_IMAGE',\n    url: url\n  };\n};\nexport var addImageSelection = function addImageSelection(url) {\n  return {\n    type: 'ADD_URL',\n    url: url\n  };\n};","map":{"version":3,"sources":["/Users/liufam/Documents/colors-app/src/actions/index.js"],"names":["axios","Clarifai","require","hexToR","h","parseInt","cutHex","substring","hexToG","hexToB","charAt","analyzeImage","url","dispatch","app","App","apiKey","models","predict","COLOR_MODEL","then","response","hexColors","outputs","data","colors","map","color","push","raw_hex","hexToRGB","i","length","R","G","B","slice","post","model","input","console","log","type","payload","catch","error","err","status","details","randomImage","get","headers","Authorization","urls","regular","getColorInfo","hex","changeMainImage","addImageSelection"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst Clarifai = require('clarifai');\n//Convert Hex to RGB functions\nfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}\nfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}\nfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}\nfunction cutHex(h) {return (h.charAt(0)===\"#\") ? h.substring(1,7):h}\n\nexport const analyzeImage = (url) => async dispatch => {\n  const app = new Clarifai.App({apiKey: 'bd8644854b19417dacdfa3adba21aab1'});\n    app.models.predict(Clarifai.COLOR_MODEL, url)\n    .then(response => {\n      const hexColors = [];\n      response.outputs[0].data.colors.map(color =>{\n        hexColors.push(color.raw_hex);\n      });\n\n      let hexToRGB = [];\n      for (let i = 0; i < hexColors.length; i++) {\n        let R = hexToR(hexColors[i]);\n        let G = hexToG(hexColors[i]);\n        let B = hexToB(hexColors[i]);\n        hexToRGB.push([ R, G , B ]);\n      };\n\n      if( hexToRGB.length > 5 ) {\n        hexToRGB = hexToRGB.slice(1, 6);\n      };\n\n      //2nd call to colormind API\n      axios.post('http://colormind.io/api/', {\n        model : \"default\",\n        input : hexToRGB\n      })\n      .then(function (response) {\n        console.log(response);\n        dispatch({\n          type: 'ANALYZE_IMAGE',\n          payload: response.data\n        });\n      })\n        .catch(function (error) {\n        console.log(error);\n      });\n    })\n    .catch(err => {\n      console.log(err);\n      dispatch({\n        type: 'ANALYZE_IMAGE_ERROR',\n        error: err.data.status.details\n    });\n  })\n};\n//finish error handling in reducer\nexport const randomImage = () => async dispatch => {\n  try {\n    const response = await axios.get('https://api.unsplash.com/photos/random', {\n      headers: {\n        Authorization: 'Client-ID 7e3664d943831b0902bdde147b893f182272b23dad6fcf084fb3eaa9d4b0b325'\n      }\n    });\n    dispatch({\n      type: 'RANDOM_IMAGE',\n      url: response.data.urls.regular\n    })\n  } catch(err) {\n    console.log(err);\n    dispatch({\n      type: 'RANDOM_IMAGE_ERROR',\n      error: err\n    })\n  }\n};\n//add error handling\nexport const getColorInfo = (hex) => async dispatch => {\n  const response = await axios.get(`https://www.thecolorapi.com/id?hex=${hex}`);\n  dispatch({\n    type: 'GET_COLOR_INFO',\n    payload: response.data\n  })\n};\n\nexport const changeMainImage = url => {\n  return {\n    type: 'MAIN_IMAGE',\n    url: url\n  };\n};\n\nexport const addImageSelection = url => {\n  return {\n    type: 'ADD_URL',\n    url: url\n  };\n};\n"]},"metadata":{},"sourceType":"module"}