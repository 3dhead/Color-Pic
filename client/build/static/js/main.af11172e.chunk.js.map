{"version":3,"sources":["actions/index.js","components/ColorsList.js","components/ImageMain.js","components/Modal.js","components/SavePalette.js","components/ImageSelection.js","components/ColorPicker.js","components/ColorInfo.js","components/Footer.js","components/App.js","reducers/clarifaiReducer.js","reducers/imageUrlReducer.js","reducers/colorInfoReducer.js","reducers/index.js","reducers/clarifaiErrorReducer.js","index.js"],"names":["Clarifai","require","hexToR","h","parseInt","cutHex","substring","hexToG","hexToB","charAt","toHex","n","isNaN","Math","max","min","analyzeImage","url","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","App","apiKey","models","predict","COLOR_MODEL","then","response","hexColors","outputs","data","colors","map","color","push","raw_hex","hexToRGB","i","length","R","G","B","slice","axios","post","model","input","RGBtoHexData","colorMindResponse","result","hexColor","alpha","type","payload","catch","err","console","log","error","status","details","stop","_x","apply","this","arguments","sendColorInfo","info","sendSelectedColor","selectedColor","changeMainImage","ColorsList","props","colorMindAPI","prevProps","index","sendPositionInfo","border","backgroundColor","opacity","_this","react_default","createElement","key","className","style","renderBorder","onClick","handleOnClickSquare","colorsRender","Component","connect","state","colorInfo","position","fetch","res","json","customers","src","alt","Modal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","addImageSelection","setState","_this2","reactjs_popup_es","trigger","modal","closeOnDocumentClick","close","onChange","target","value","placeholder","submitURL","SavePalette","Button","content","ImageSelection","exampleUrl","renderImages","components_Modal","components_SavePalette","exampleImages","random_url","ColorPicker","handleChange","colorPalette","newColor","hex","rgb","updateHexColor","sendAlphaInfo","lib","marginRight","r","g","b","newColorSet","ColorInfo","Footer","Grid","celled","Row","Column","width","components_ImageSelection","components_ImageMain","components_ColorsList","components_ColorInfo","components_ColorPicker","components_Footer","initialState","combineReducers","undefined","action","objectSpread","array","item","updateObjectInArray","concat","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.af11172e.chunk.js","sourcesContent":["import axios from 'axios';\nconst Clarifai = require('clarifai');\n//Convert Hex to RGB functions\nfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)};\nfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)};\nfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)};\nfunction cutHex(h) {return (h.charAt(0)===\"#\") ? h.substring(1,7):h};\n// Convert RGB to Hex functions\nfunction rgbToHex(R,G,B) {return \"#\"+toHex(R)+toHex(G)+toHex(B)};\nfunction toHex(n) {\n n = parseInt(n,10);\n if (isNaN(n)) return \"00\";\n n = Math.max(0,Math.min(n,255));\n return \"0123456789ABCDEF\".charAt((n-n%16)/16)\n      + \"0123456789ABCDEF\".charAt(n%16);\n};\n\nexport const analyzeImage = (url) => async dispatch => {\n  const app = new Clarifai.App({apiKey: 'bd8644854b19417dacdfa3adba21aab1'});\n    app.models.predict(Clarifai.COLOR_MODEL, url)\n    .then(response => {\n      //convert Hexcolors from Clarifai API to send to Colormind API\n      const hexColors = [];\n      response.outputs[0].data.colors.map(color => {\n        return hexColors.push(color.raw_hex);\n      });\n\n      let hexToRGB = [];\n      for (let i = 0; i < hexColors.length; i++) {\n        let R = hexToR(hexColors[i]);\n        let G = hexToG(hexColors[i]);\n        let B = hexToB(hexColors[i]);\n        hexToRGB.push([ R, G , B ]);\n      };\n\n      if( hexToRGB.length > 5 ) {\n        hexToRGB = hexToRGB.slice(1, 6);\n      };\n\n      if (hexToRGB.length < 5) {\n        for (let i = hexToRGB.length; i < 5 ; i++) {\n          hexToRGB.push('N');\n        }\n      }\n      //2nd call to colormind API\n      axios.post('http://colormind.io/api/', {\n        model : \"default\",\n        input : hexToRGB\n      })\n      .then(function (response) {\n        let RGBtoHexData = [];\n        let colorMindResponse = response.data.result;\n        for (let i = 0; i < colorMindResponse.length; i++) {\n          RGBtoHexData.push({\n            hexColor: rgbToHex(colorMindResponse[i][0], colorMindResponse[i][1], colorMindResponse[i][2]),\n            alpha: 1\n          });\n        }\n        // console.log(RGBtoHexData);\n        dispatch({\n          type: 'ANALYZE_IMAGE',\n          payload: RGBtoHexData\n        });\n      })\n    })\n    .catch(err => {\n      console.log(err);\n      dispatch({\n        type: 'ANALYZE_IMAGE_ERROR',\n        error: err.data.status.details\n    });\n  })\n};\n\n//finish error handling in reducer\nexport const randomImage = () => async dispatch => {\n  try {\n    const response = await axios.get('https://api.unsplash.com/photos/random', {\n      headers: {\n        Authorization: 'Client-ID 7e3664d943831b0902bdde147b893f182272b23dad6fcf084fb3eaa9d4b0b325'\n      }\n    });\n    dispatch({\n      type: 'RANDOM_IMAGE',\n      url: response.data.urls.regular\n    })\n  } catch(err) {\n    console.log(err);\n    dispatch({\n      type: 'RANDOM_IMAGE_ERROR',\n      error: err\n    })\n  }\n};\n//add error handling\nexport const sendColorInfo = (hexColor) => dispatch => {\n\n  let R = hexToR(hexColor);\n  let G = hexToG(hexColor);\n  let B = hexToB(hexColor);\n  dispatch({\n    type: 'SEND_COLOR_INFO',\n    info: [hexColor, R, G, B],\n  })\n};\n\nexport const sendPositionInfo = (position) => dispatch => {\n  dispatch({\n    type: 'SEND_POSITION_INFO',\n    position: position\n  })\n};\n\nexport const sendSelectedColor = (color) => dispatch => {\n  dispatch({\n    type: 'SELECTED_COLOR',\n    selectedColor: color\n  })\n};\nexport const sendAlphaInfo = (alpha) => dispatch => {\n  dispatch({\n    type: 'SEND_ALPHA_INFO',\n    alpha: alpha\n  })\n};\n\nexport const updateHexColor = (newColorSet) => dispatch => {\n  dispatch({\n    type: 'UPDATE_HEX_COLOR',\n    newColorSet: newColorSet\n  })\n};\n\nexport const changeMainImage = url => {\n  return {\n    type: 'MAIN_IMAGE',\n    url: url\n  };\n};\n\nexport const addImageSelection = url => {\n  return {\n    type: 'ADD_URL',\n    url: url\n  };\n};\n\nexport const colorMindAPI = () => dispatch => {\n  return fetch('/api/customers')\n    .then(res => res.json())\n    .then(customers => {\n      // console.log(customers);\n      dispatch({\n        type: 'GET_CUSTOMERS',\n        payload: customers\n      })\n    }\n  )\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { sendColorInfo } from '../actions';\nimport { sendPositionInfo } from '../actions';\nimport { colorMindAPI } from '../actions';\nimport { sendSelectedColor } from '../actions';\n\nclass ColorsList extends Component {\n  componentDidMount() {\n    this.props.analyzeImage(this.props.url);\n    this.props.colorMindAPI();\n  };\n  // Make API call each time the URL changes\n  componentDidUpdate(prevProps) {\n    if (this.props.url !== prevProps.url ) {\n      this.props.analyzeImage(this.props.url);\n    };\n  };\n\n  handleOnClickSquare(color, index) {\n    this.props.sendSelectedColor(color);\n    this.props.sendColorInfo(color);\n    this.props.sendPositionInfo(index);\n  }\n\n  renderBorder(color, alpha) {\n    if (this.props.selectedColor === color) {\n      return {\n        border: '3px solid black',\n        backgroundColor: color,\n        opacity: alpha\n      };\n    }\n    return {\n      backgroundColor: color,\n      opacity: alpha\n    };\n  }\n\n  colorsRender() {\n    // if there is no error in request and colors data is returned\n    if (this.props.colors.length >=1) {\n      const ColorsList = this.props.colors.map((color,index) =>\n          <div\n            key={color.hexColor}\n            className=\"color-square\"\n            style={this.renderBorder(color.hexColor, color.alpha)}\n            onClick={() => this.handleOnClickSquare(color.hexColor, index)}\n          >\n        </div>\n      );\n      return(ColorsList);\n    }\n    // otherwise return error statement\n    return (\n      <div>\n        {this.props.error}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n    <div>\n      {this.colorsRender()}\n    </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    colors: state.colors.colors,\n    selectedColor: state.colorInfo.selectedColor,\n    url: state.url.url,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  analyzeImage,\n  sendColorInfo,\n  sendPositionInfo,\n  sendSelectedColor,\n  colorMindAPI\n})(ColorsList);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst ImageMain = ({url}) => {\n  return(\n      <img\n        className=\"sample-img\"\n        src={url}\n        alt=\"analyze main\"\n      />\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url.url\n  };\n};\n\nexport default connect(mapStateToProps)(ImageMain);\n","import React, { Component } from 'react';\nimport Popup from 'reactjs-popup';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { changeMainImage } from '../actions';\nimport { addImageSelection } from '../actions';\n\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n  }\n\n  submitURL(event) {\n    event.preventDefault();\n    console.log(this.state.input);\n    // add error handle in case of bad url\n    this.props.analyzeImage(this.state.input);\n    this.props.changeMainImage(this.state.input);\n    this.props.addImageSelection(this.state.input);\n    //clear inputbar on submit\n    this.setState({input: ''});\n  };\n\n  render() {\n    return (\n      <Popup\n        trigger={<button className=\"modal-btn\"> Try Your Own Image </button>}\n        modal\n        closeOnDocumentClick\n      >\n        {close => (\n          <div>\n            <h3>Try your own image</h3>\n              <form>\n                <div className=\"ui action input\">\n                  <input\n                    className=\"url-input\"\n                    type=\"text\"\n                    onChange={event => this.setState({input: event.target.value})}\n                    value={this.state.input}\n                    placeholder=\"Copy and paste Url...\"\n                  />\n                  <button\n                    onClick={event => {\n                      this.submitURL(event);\n                      close();\n                    }}\n                    className=\"ui button\"\n                  >\n                    Submit\n                  </button>\n                </div>\n              </form>\n          </div>\n          )\n        }\n      </Popup>\n    );\n  }\n}\n\nexport default connect(null, { analyzeImage, changeMainImage, addImageSelection })(Modal);\n","import React from 'react';\nimport { Button } from 'semantic-ui-react'\n\nconst SavePalette = () => {\n  return (\n    <div className=\"save-pallette\">\n      <Button content=\"Save Palette\" />\n    </div>\n  );\n}\n\nexport default SavePalette;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { changeMainImage } from '../actions';\nimport { analyzeImage } from '../actions';\nimport { Button } from 'semantic-ui-react'\nimport  Modal from './Modal';\nimport SavePalette from './SavePalette';\n\nclass ImageSelection extends Component {\n  renderImages () {\n    return (\n      this.props.exampleUrl.map(url =>\n        <div key={url} >\n          <img\n            className=\"image-selection\"\n            src={url}\n            alt=\"selection\"\n            onClick={() => this.props.changeMainImage(url)}\n          />\n        </div>\n      )\n    );\n  };\n\n  render() {\n    return(\n      <div>\n        <div className=\"images-container\">\n          {this.renderImages()}\n        </div>\n        <Modal />\n        <Button\n          className=\"regen-btn\"\n          content=\"Regenerate\"\n          onClick={() => this.props.analyzeImage(this.props.url)}\n        />\n        <SavePalette />\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url.url,\n    exampleUrl: state.url.exampleImages,\n    random_url: state.url.random_url\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeMainImage,\n  analyzeImage })(ImageSelection);\n","import React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { AlphaPicker } from 'react-color';\nimport { connect } from 'react-redux';\nimport { updateHexColor } from '../actions';\nimport { sendColorInfo } from '../actions';\nimport { sendAlphaInfo } from '../actions';\nimport { sendSelectedColor } from '../actions';\n\nclass ColorPicker extends Component {\n  handleChange = (color, event) => {\n    let colorPalette = this.props.colors;\n    // create new color object\n    let newColor = {\n      hexColor: color.hex,\n      alpha: color.rgb.a\n    };\n    //update new item in color array\n    colorPalette[this.props.position] = newColor\n    // send new color pallette\n    this.props.updateHexColor(colorPalette);\n    this.props.sendColorInfo(color.hex);\n    this.props.sendSelectedColor(color.hex);\n    this.props.sendAlphaInfo(color.rgb.a);\n  }\n  render() {\n    if(this.props.colors.length >= 1) {\n      return (\n        <div className=\"color-picker\">\n          <ChromePicker\n            className=\"chrome-picker\"\n            style={{ marginRight: 4 + 'em' }}\n            color={{\n              r: this.props.R,\n              g: this.props.G,\n              b: this.props.B,\n              a: this.props.a\n            }}\n            onChange={ this.handleChange }\n          />\n          {/* <h4>Alpha</h4> */}\n          {/* <AlphaPicker\n            style={{ marginRight: 4 + 'em' }}\n            color={{\n              r: this.props.R,\n              g: this.props.G,\n              b: this.props.B,\n              a: this.props.a\n            }}\n            onChange={ this.handleChange }\n          /> */}\n        </div>\n      );\n    }\n    return null;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    hexColor: state.colorInfo.hexColor,\n    R: state.colorInfo.R,\n    G: state.colorInfo.G,\n    B: state.colorInfo.B,\n    a: state.colorInfo.alpha,\n    colors: state.colors.colors,\n    position: state.colorInfo.position\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateHexColor,\n  sendColorInfo,\n  sendSelectedColor,\n  sendAlphaInfo })(ColorPicker);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass ColorInfo extends Component {\n  render(){\n    // console.log(this.props.colorInfo.colorData);\n    if(true) {\n      return (\n        <div className=\"color-info\">\n         <h5>Hex: {this.props.hexColor}</h5>\n         <p className=\"info-text\">R: {this.props.R}</p>\n         <p className=\"info-text\">G: {this.props.G}</p>\n         <p className=\"info-text\">B: {this.props.B}</p>\n        </div>\n      );\n    }\n    return null;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    hexColor: state.colorInfo.hexColor,\n    R: state.colorInfo.R,\n    G: state.colorInfo.G,\n    B: state.colorInfo.B,\n  };\n};\n\nexport default connect(mapStateToProps, { })(ColorInfo);\n","import React from 'react';\n\nconst Footer = ({url}) => {\n  return(\n    <div className=\"footer\">\n      © 2019\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport './App.css';\n\nimport ColorsList from './ColorsList';\nimport ImageMain from './ImageMain';\nimport ImageSelection from './ImageSelection';\nimport ColorPicker from './ColorPicker';\nimport ColorInfo from './ColorInfo';\nimport Footer from './Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App container\">\n        <div className=\"header\">\n          <h2 >Choose a picture and analyze</h2>\n        </div>\n        <Grid celled>\n          <Grid.Row>\n            <Grid.Column width={3}>\n              <ImageSelection />\n            </Grid.Column>\n            <Grid.Column width={13}>\n              <ImageMain />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Grid celled>\n          <Grid.Row>\n            <Grid.Column width={16}>\n              <ColorsList />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Grid celled>\n          <Grid.Row>\n            <Grid.Column width={5}>\n              <ColorInfo />\n            </Grid.Column>\n            <Grid.Column\n              width={11}\n              className=\"color-picker-grid\"\n            >\n              <ColorPicker />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const initialState = {\n  colors: []\n}\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'ANALYZE_IMAGE':\n      return {...state,\n        colors: action.payload\n      };\n    case 'UPDATE_HEX_COLOR':\n      function updateObjectInArray(array, action) {\n        return array.map((item, index) => {\n          if (index !== action.index) {\n            // This isn't the item we care about - keep it as-is\n            return item\n          }\n          // Otherwise, this is the one we want - return an updated value\n          return {\n            ...item,\n            ...action.item\n          }\n        })\n      }\n      return {...state,\n          colors: updateObjectInArray(state.colors, action.newColorSet)\n        };\n    default:\n     return state;\n  }\n};\n","const initialState = {\n  url: 'https://images.unsplash.com/photo-1508341421810-36b8fc06075b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1067&q=80',\n  exampleImages: [\n    'https://images.unsplash.com/photo-1508341421810-36b8fc06075b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1067&q=80',\n    'https://images.unsplash.com/photo-1429497612798-1f189166a08a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80',\n    'https://images.unsplash.com/photo-1493804714600-6edb1cd93080?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80'\n  ],\n  random_url: ''\n};\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'MAIN_IMAGE':\n     return {\n       ...state,\n       url: action.url\n     };\n     case 'RANDOM_IMAGE':\n      return {\n        ...state,\n        url: action.url,\n        random_url: action.url\n      };\n      case 'ADD_URL':\n       return {\n         ...state,\n         exampleImages: state.exampleImages.concat(action.url)\n       };\n       // case 'REMOVE_IMG':\n       //  return {\n       //    ...state,\n       //    exampleImages: state.exampleImages.concat(action.url)\n       //  };\n    default:\n     return state;\n  }\n};\n","const initialState = {\n  hexColor: [],\n  R: [],\n  G: [],\n  B: [],\n  alpha: [],\n  position: 0,\n  selectedColor: []\n}\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'SEND_COLOR_INFO':\n      return {...state,\n        hexColor: action.info[0],\n        R: action.info[1],\n        G: action.info[2],\n        B: action.info[3]\n      };\n      case 'SEND_POSITION_INFO':\n        return {...state,\n          position: action.position\n        };\n      case 'SEND_ALPHA_INFO':\n        return {...state,\n          alpha: action.alpha\n        };\n      case 'SELECTED_COLOR':\n        return {...state,\n          selectedColor: action.selectedColor\n        };\n    default:\n     return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport clarifaiReducer from './clarifaiReducer';\nimport clarifaiErrorReducer from './clarifaiErrorReducer';\nimport imageUrlReducer from './imageUrlReducer';\nimport colorInfoReducer from './colorInfoReducer';\n\nexport default combineReducers({\n  colors: clarifaiReducer,\n  error: clarifaiErrorReducer,\n  url: imageUrlReducer,\n  colorInfo: colorInfoReducer\n});\n","export default (state = [], action) => {\n  switch(action.type) {\n    case 'ANALYZE_IMAGE_ERROR':\n      return action.error\n    default:\n     return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}