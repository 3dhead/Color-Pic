{"version":3,"sources":["actions/index.js","components/ColorsList.js","components/ImageMain.js","components/Modal.js","components/ImageSelection.js","components/ColorPicker.js","components/ColorInfo.js","components/Regenerate.js","components/SavePalette.js","components/Footer.js","components/App.js","reducers/clarifaiReducer.js","reducers/imageUrlReducer.js","reducers/colorInfoReducer.js","reducers/index.js","reducers/clarifaiErrorReducer.js","index.js"],"names":["app","require","App","apiKey","cutHex","h","charAt","substring","toHex","n","parseInt","isNaN","Math","max","min","analyzeImage","url","dispatch","models","predict","then","response","console","log","hexColors","outputs","data","colors","map","color","push","raw_hex","slice","length","fetch","res","json","R","G","B","RGBtoHexData","colorMindResponse","i","hexColor","alpha","type","payload","catch","err","error","status","details","sendColorInfo","hexToG","hexToB","info","sendSelectedColor","selectedColor","changeMainImage","ColorsList","this","props","prevProps","index","sendPositionInfo","position","border","backgroundColor","opacity","_this","react_default","a","createElement","key","className","style","renderBorder","onClick","handleOnClickSquare","colorsRender","Component","connect","state","colorInfo","_ref","src","alt","Modal","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","input","event","preventDefault","addImageSelection","setState","_this2","reactjs_popup_es","trigger","modal","closeOnDocumentClick","close","onChange","target","value","placeholder","submitURL","ImageSelection","exampleUrl","renderImages","components_Modal","exampleImages","ColorPicker","handleChange","colorPalette","newColor","hex","toUpperCase","rgb","updateHexColor","sendAlphaInfo","lib","marginRight","r","g","b","newColorSet","ColorInfo","Regenerate","Button","content","SavePalette","Footer","Grid","celled","Row","Column","width","components_ImageSelection","components_ImageMain","components_ColorsList","components_ColorInfo","components_Regenerate","components_ColorPicker","components_SavePalette","components_Footer","initialState","combineReducers","arguments","undefined","action","objectSpread","array","item","updateObjectInArray","random_url","concat","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.c7e5341d.chunk.js","sourcesContent":["import axios from 'axios';\nconst Clarifai = require('clarifai');\nconst app = new Clarifai.App({apiKey: 'bd8644854b19417dacdfa3adba21aab1'});\n//Convert Hex to RGB functions\nfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)};\nfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)};\nfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)};\nfunction cutHex(h) {return (h.charAt(0)===\"#\") ? h.substring(1,7):h};\n// Convert RGB to Hex functions\nfunction rgbToHex(R,G,B) {return \"#\"+toHex(R)+toHex(G)+toHex(B)};\nfunction toHex(n) {\n n = parseInt(n,10);\n if (isNaN(n)) return \"00\";\n n = Math.max(0,Math.min(n,255));\n return \"0123456789ABCDEF\".charAt((n-n%16)/16)\n      + \"0123456789ABCDEF\".charAt(n%16);\n};\n\nexport const analyzeImage = (url) => dispatch => {\n  app.models.predict(\"eeed0b6733a644cea07cf4c60f87ebb7\", url)\n  .then(function(response) {\n      console.log(response);\n      const hexColors = [];\n      response.outputs[0].data.colors.map(color => {\n        return hexColors.push(color.raw_hex.slice(1, color.raw_hex.length));\n      });\n      fetch('/api/colormind?colors=' + hexColors)\n        .then(res => res.json())\n        .then(function (response) {\n          let RGBtoHexData = [];\n          let colorMindResponse = response;\n          for (let i = 0; i < colorMindResponse.length; i++) {\n            RGBtoHexData.push({\n              hexColor: rgbToHex(colorMindResponse[i][0], colorMindResponse[i][1], colorMindResponse[i][2]),\n              alpha: 1\n            });\n          }\n        // console.log(RGBtoHexData);\n        dispatch({\n          type: 'ANALYZE_IMAGE',\n          payload: RGBtoHexData\n        });\n      })\n    })\n    .catch(err => {\n      console.log(err);\n      dispatch({\n        type: 'ANALYZE_IMAGE_ERROR',\n        error: err.data.status.details\n    });\n  })\n};\n\n//add error handling\nexport const sendColorInfo = (hexColor) => dispatch => {\n\n  let R = hexToR(hexColor);\n  let G = hexToG(hexColor);\n  let B = hexToB(hexColor);\n  dispatch({\n    type: 'SEND_COLOR_INFO',\n    info: [hexColor, R, G, B],\n  })\n};\n\nexport const sendPositionInfo = (position) => dispatch => {\n  dispatch({\n    type: 'SEND_POSITION_INFO',\n    position: position\n  })\n};\n\nexport const sendSelectedColor = (color) => dispatch => {\n  dispatch({\n    type: 'SELECTED_COLOR',\n    selectedColor: color\n  })\n};\nexport const sendAlphaInfo = (alpha) => dispatch => {\n  dispatch({\n    type: 'SEND_ALPHA_INFO',\n    alpha: alpha\n  })\n};\n\nexport const updateHexColor = (newColorSet) => dispatch => {\n  dispatch({\n    type: 'UPDATE_HEX_COLOR',\n    newColorSet: newColorSet\n  })\n};\n\nexport const changeMainImage = url => {\n  return {\n    type: 'MAIN_IMAGE',\n    url: url\n  };\n};\n\nexport const addImageSelection = url => {\n  return {\n    type: 'ADD_URL',\n    url: url\n  };\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { sendColorInfo } from '../actions';\nimport { sendPositionInfo } from '../actions';\nimport { sendSelectedColor } from '../actions';\n\nclass ColorsList extends Component {\n  componentDidMount() {\n    this.props.analyzeImage(this.props.url);\n  };\n  // Make API call each time the URL changes\n  componentDidUpdate(prevProps) {\n    if (this.props.url !== prevProps.url ) {\n      this.props.analyzeImage(this.props.url);\n    };\n  };\n\n  handleOnClickSquare(color, index) {\n    this.props.sendSelectedColor(color);\n    this.props.sendColorInfo(color);\n    this.props.sendPositionInfo(index);\n  }\n\n  renderBorder(index, color, alpha) {\n    if (this.props.position === index) {\n      return {\n        border: '4px solid black',\n        backgroundColor: color,\n        opacity: alpha\n      };\n    }\n    return {\n      backgroundColor: color,\n      opacity: alpha\n    };\n  }\n\n  colorsRender() {\n    // if there is no error in request and colors data is returned\n    if (this.props.colors.length >=1) {\n      const ColorsList = this.props.colors.map((color,index) =>\n          <div\n            key={color.hexColor}\n            className=\"color-square\"\n            style={this.renderBorder(index, color.hexColor, color.alpha)}\n            onClick={() => this.handleOnClickSquare(color.hexColor, index)}\n          >\n        </div>\n      );\n      return(ColorsList);\n    }\n    // otherwise return error statement\n    return (\n      <div>\n        {this.props.error}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n    <div>\n      {this.colorsRender()}\n    </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    colors: state.colors.colors,\n    selectedColor: state.colorInfo.selectedColor,\n    position: state.colorInfo.position,\n    url: state.url.url,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  analyzeImage,\n  sendColorInfo,\n  sendPositionInfo,\n  sendSelectedColor,\n})(ColorsList);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst ImageMain = ({url}) => {\n  return(\n      <img\n        className=\"sample-img\"\n        src={url}\n        alt=\"analyze main\"\n      />\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url.url\n  };\n};\n\nexport default connect(mapStateToProps)(ImageMain);\n","import React, { Component } from 'react';\nimport Popup from 'reactjs-popup';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { changeMainImage } from '../actions';\nimport { addImageSelection } from '../actions';\n\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n  }\n\n  submitURL(event) {\n    event.preventDefault();\n    console.log(this.state.input);\n    // add error handle in case of bad url\n    this.props.analyzeImage(this.state.input);\n    this.props.changeMainImage(this.state.input);\n    this.props.addImageSelection(this.state.input);\n    //clear inputbar on submit\n    this.setState({input: ''});\n  };\n\n  render() {\n    return (\n      <Popup\n        trigger={<button className=\"modal-btn\"> Try Your Own Image </button>}\n        modal\n        closeOnDocumentClick\n      >\n        {close => (\n          <div>\n            <h3>Try your own image</h3>\n              <form>\n                <div className=\"ui action input\">\n                  <input\n                    className=\"url-input\"\n                    type=\"text\"\n                    onChange={event => this.setState({input: event.target.value})}\n                    value={this.state.input}\n                    placeholder=\"Copy and paste Url...\"\n                  />\n                  <button\n                    onClick={event => {\n                      this.submitURL(event);\n                      close();\n                    }}\n                    className=\"ui button\"\n                  >\n                    Submit\n                  </button>\n                </div>\n              </form>\n          </div>\n          )\n        }\n      </Popup>\n    );\n  }\n}\n\nexport default connect(null, { analyzeImage, changeMainImage, addImageSelection })(Modal);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { changeMainImage } from '../actions';\nimport { analyzeImage } from '../actions';\nimport  Modal from './Modal';\n\nclass ImageSelection extends Component {\n  renderImages () {\n    return (\n      this.props.exampleUrl.map(url =>\n        <div key={url} >\n          <img\n            className=\"image-selection\"\n            src={url}\n            alt=\"selection\"\n            onClick={() => this.props.changeMainImage(url)}\n          />\n        </div>\n      )\n    );\n  };\n\n  render() {\n    return(\n      <div>\n        <div className=\"images-container\">\n          {this.renderImages()}\n        </div>\n        <Modal />\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url.url,\n    exampleUrl: state.url.exampleImages,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeMainImage,\n  analyzeImage })(ImageSelection);\n","import React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { connect } from 'react-redux';\nimport { updateHexColor } from '../actions';\nimport { sendColorInfo } from '../actions';\nimport { sendAlphaInfo } from '../actions';\nimport { sendSelectedColor } from '../actions';\n\nclass ColorPicker extends Component {\n  handleChange = (color, event) => {\n    let colorPalette = this.props.colors;\n    // create new color object\n    let newColor = {\n      hexColor: color.hex.toUpperCase(),\n      alpha: color.rgb.a\n    };\n    //update new item in color array\n    colorPalette[this.props.position] = newColor\n    // send new color pallette, use upppercase for hex colors\n    this.props.updateHexColor(colorPalette);\n    this.props.sendColorInfo(color.hex.toUpperCase());\n    this.props.sendSelectedColor(color.hex.toUpperCase());\n    this.props.sendAlphaInfo(color.rgb.a);\n  }\n\n  render() {\n    if(this.props.colors.length >= 1) {\n      return (\n        <div className=\"color-picker\">\n          <ChromePicker\n            className=\"chrome-picker\"\n            style={{ marginRight: 4 + 'em' }}\n            color={{\n              r: this.props.R,\n              g: this.props.G,\n              b: this.props.B,\n              a: this.props.colors[this.props.position].alpha\n            }}\n            onChange={ this.handleChange }\n          />\n          {/* <h4>Alpha</h4> */}\n          {/* <AlphaPicker\n            style={{ marginRight: 4 + 'em' }}\n            color={{\n              r: this.props.R,\n              g: this.props.G,\n              b: this.props.B,\n              a: this.props.a\n            }}\n            onChange={ this.handleChange }\n          /> */}\n        </div>\n      );\n    }\n    return null;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    hexColor: state.colorInfo.hexColor,\n    R: state.colorInfo.R,\n    G: state.colorInfo.G,\n    B: state.colorInfo.B,\n    a: state.colorInfo.alpha,\n    colors: state.colors.colors,\n    position: state.colorInfo.position\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateHexColor,\n  sendColorInfo,\n  sendSelectedColor,\n  sendAlphaInfo })(ColorPicker);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Input } from 'semantic-ui-react';\n\nclass ColorInfo extends Component {\n  render(){\n    return (\n      <div className=\"color-info\">\n       <h5>Hex</h5>\n       <input\n         className=\"hex-info-input\"\n         value={this.props.hexColor}\n       />\n       <p className=\"info-text\">R</p>\n       <p className=\"info-text\">G</p>\n       <p className=\"info-text\">B</p>\n       <div>\n         <input\n           className=\"info-input\"\n           value={this.props.R}\n         />\n         <input\n           className=\"info-input\"\n           value={this.props.G}\n         />\n         <input\n           className=\"info-input\"\n           value={this.props.B}\n         />\n       </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    hexColor: state.colorInfo.hexColor,\n    R: state.colorInfo.R,\n    G: state.colorInfo.G,\n    B: state.colorInfo.B,\n  };\n};\n\nexport default connect(mapStateToProps, { })(ColorInfo);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { Button } from 'semantic-ui-react';\n\nclass Regenerate extends Component {\n  render() {\n    return (\n      <Button\n        className=\"regen-btn\"\n        content=\"Regenerate\"\n        onClick={() => this.props.analyzeImage(this.props.url)}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url.url\n  };\n}\n\nexport default connect(mapStateToProps, { analyzeImage })(Regenerate);\n","import React from 'react';\nimport { Button } from 'semantic-ui-react'\n\nconst SavePalette = () => {\n  return (\n      <Button\n        className=\"save-pallette\"\n        content=\"Save Palette\"\n      />\n  );\n}\n\nexport default SavePalette;\n","import React from 'react';\n\nconst Footer = ({url}) => {\n  return(\n    <div className=\"footer\">\n      © 2019\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport './App.css';\n\nimport ColorsList from './ColorsList';\nimport ImageMain from './ImageMain';\nimport ImageSelection from './ImageSelection';\nimport ColorPicker from './ColorPicker';\nimport ColorInfo from './ColorInfo';\nimport Regenerate from './Regenerate';\nimport SavePalette from './SavePalette';\nimport Footer from './Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App container\">\n        <div className=\"header\">\n          <h2 >Choose a picture and analyze</h2>\n        </div>\n        <Grid celled>\n          <Grid.Row>\n            <Grid.Column width={3}>\n              <ImageSelection />\n            </Grid.Column>\n            <Grid.Column width={13}>\n              <ImageMain />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Grid celled>\n          <Grid.Row>\n            <Grid.Column width={16}>\n              <ColorsList />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Grid celled>\n          <Grid.Row>\n            <Grid.Column width={5}>\n              <ColorInfo />\n              <Regenerate />\n            </Grid.Column>\n            <Grid.Column width={8}>\n              <ColorPicker />\n            </Grid.Column>\n            <Grid.Column width={3}>\n              <SavePalette />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const initialState = {\n  colors: []\n}\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'ANALYZE_IMAGE':\n      return {...state,\n        colors: action.payload\n      };\n    case 'UPDATE_HEX_COLOR':\n      function updateObjectInArray(array, action) {\n        return array.map((item, index) => {\n          if (index !== action.index) {\n            // This isn't the item we care about - keep it as-is\n            return item\n          }\n          // Otherwise, this is the one we want - return an updated value\n          return {\n            ...item,\n            ...action.item\n          }\n        })\n      }\n      return {...state,\n          colors: updateObjectInArray(state.colors, action.newColorSet)\n        };\n    default:\n     return state;\n  }\n};\n","const initialState = {\n  url: 'https://images.unsplash.com/photo-1520633946251-dcf52b0276b9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80',\n  exampleImages: [\n    'https://images.unsplash.com/photo-1520633946251-dcf52b0276b9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80',\n    'https://images.unsplash.com/photo-1429497612798-1f189166a08a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80',\n    'https://images.unsplash.com/photo-1493804714600-6edb1cd93080?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80'\n  ],\n};\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'MAIN_IMAGE':\n     return {\n       ...state,\n       url: action.url\n     };\n     case 'RANDOM_IMAGE':\n      return {\n        ...state,\n        url: action.url,\n        random_url: action.url\n      };\n      case 'ADD_URL':\n       return {\n         ...state,\n         exampleImages: state.exampleImages.concat(action.url)\n       };\n       // case 'REMOVE_IMG':\n       //  return {\n       //    ...state,\n       //    exampleImages: state.exampleImages.concat(action.url)\n       //  };\n    default:\n     return state;\n  }\n};\n","const initialState = {\n  hexColor: '',\n  R: '',\n  G: '',\n  B: '',\n  alpha: '',\n  position: 0,\n  selectedColor: ''\n}\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'SEND_COLOR_INFO':\n      return {...state,\n        hexColor: action.info[0],\n        R: action.info[1],\n        G: action.info[2],\n        B: action.info[3]\n      };\n      case 'SEND_POSITION_INFO':\n        return {...state,\n          position: action.position\n        };\n      case 'SEND_ALPHA_INFO':\n        return {...state,\n          alpha: action.alpha\n        };\n      case 'SELECTED_COLOR':\n        return {...state,\n          selectedColor: action.selectedColor\n        };\n    default:\n     return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport clarifaiReducer from './clarifaiReducer';\nimport clarifaiErrorReducer from './clarifaiErrorReducer';\nimport imageUrlReducer from './imageUrlReducer';\nimport colorInfoReducer from './colorInfoReducer';\n\nexport default combineReducers({\n  colors: clarifaiReducer,\n  error: clarifaiErrorReducer,\n  url: imageUrlReducer,\n  colorInfo: colorInfoReducer\n});\n","export default (state = [], action) => {\n  switch(action.type) {\n    case 'ANALYZE_IMAGE_ERROR':\n      return action.error\n    default:\n     return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}