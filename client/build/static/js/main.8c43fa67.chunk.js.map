{"version":3,"sources":["components/HeaderMenu.js","components/HomePageHeader.js","actions/index.js","components/ColorsList.js","components/ImageMain.js","components/ImageModal.js","components/ImageSelection.js","components/ColorPicker.js","components/ColorInfo.js","components/Regenerate.js","actions/MyPaletteAPI.js","components/SavePalette.js","components/Footer.js","components/HomePage.js","components/ConfirmDeleteModal.js","components/EditModal.js","components/MyPallettes.js","components/AboutPage.js","components/App.js","reducers/clarifaiReducer.js","reducers/imageUrlReducer.js","reducers/colorInfoReducer.js","reducers/colorPaletteReducer.js","reducers/index.js","reducers/clarifaiErrorReducer.js","index.js"],"names":["HeaderMenu","state","handleItemClick","e","_ref","name","_this","setState","activeItem","this","react_default","a","createElement","Menu","stackable","react_router_dom","to","Item","active","onClick","Component","HomePageHeader","Header","as","className","app","require","App","apiKey","cutHex","h","charAt","substring","toHex","n","parseInt","isNaN","Math","max","min","analyzeImage","url","dispatch","models","predict","then","response","hexColors","outputs","data","colors","map","color","push","raw_hex","slice","length","fetch","res","json","R","G","B","RGBtoHexData","colorMindResponse","i","hexColor","alpha","type","payload","catch","err","console","log","error","status","details","sendColorInfo","hexToG","hexToB","clearRecieved","sendPositionInfo","position","clearPosition","clearColorList","sendSelectedColor","selectedColor","sendAlphaInfo","changeMainImage","ColorsList","props","prevProps","index","handleOnClickSquare","backgroundColor","opacity","cursor","key","style","renderColor","renderCarot","Icon","size","Dimmer","inverted","Loader","Grid","Column","width","colorsRender","connect","colorInfo","mobile","computer","Image","src","alt","AddImgModal","input","open","close","closeConfigShow","closeOnEscape","closeOnDimmerClick","event","preventDefault","addImageSelection","target","value","_this2","Input","onChange","handleInput","placeholder","_this3","Button","setError","submitURL","_this$state","Modal","onClose","Content","renderURLinput","renderSubmitButton","ImageSelection","selectedUrl","border","exampleUrl","renderBorder","handleClick","id","renderImages","ImageModal","exampleImages","ColorPicker","handleChange","colorPalette","newColor","hex","toUpperCase","rgb","updateHexColor","lib","marginRight","r","g","b","renderColorPicker","newColorSet","ColorInfo","Regenerate","content","getColors","axios","get","SavePalette","newColorPalette","title","marginLeft","handleConfirmClick","label","_this4","renderTitleInput","Actions","renderConfirmButton","colorSet","post","Footer","HomePage","Container","textAlign","components_HomePageHeader","celled","Row","components_ImageSelection","components_ImageMain","components_ColorsList","components_ColorPicker","components_ColorInfo","components_Regenerate","components_SavePalette","components_Footer","ConfirmDelete","show","handleConfirm","deleteColorPalette","objectID","handleCancel","Confirm","concat","onCancel","onConfirm","deleteColor","myPalettes","DeleteColor","delete","EditModal","selectedSet","cancel","colorPosition","UpdateData","updateColorPalette","renderOneColorSet","columns","Segment","Data","put","MyPallettes","undefined","palette","_id","ConfirmDeleteModal","components_EditModal","renderPalettes","addColor","AddColor","updateColor","UpdateColor","AboutPage","components_HeaderMenu","react_router","path","exact","component","initialState","combineReducers","arguments","action","Object","objectSpread","array","item","updateObjectInArray","random_url","filter","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.8c43fa67.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Menu } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\n\nclass HeaderMenu extends Component {\n  state = {}\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  render() {\n    const { activeItem } = this.state\n    // anchor tag is in semantic ui componnent, create seperate with CSS\n    return (\n      <Menu stackable>\n        <Link to=\"/\">\n        <Menu.Item\n          name='Color Pic'\n          active={activeItem === 'Color Pic'}\n          onClick={this.handleItemClick}\n        >\n          Color Pic\n        </Menu.Item>\n        </Link>\n        <Link to=\"/MyPallettes\">\n        <Menu.Item\n          name='My Palettes'\n          active={activeItem === 'My Palettes'}\n          onClick={this.handleItemClick}\n        >\n           My Palettes\n        </Menu.Item>\n        </Link>\n        <Link to=\"/About\">\n          <Menu.Item\n            name='About'\n            active={activeItem === 'About'}\n            onClick={this.handleItemClick}\n          >\n            About\n          </Menu.Item>\n        </Link>\n      </Menu>\n    )\n  }\n}\n\nexport default HeaderMenu;\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nconst HomePageHeader = () => {\n  return (\n    <Header as=\"h1\" className=\"header\">\n      Choose a picture and analyze\n    </Header>\n  );\n}\n\nexport default HomePageHeader;\n","import axios from 'axios';\nconst Clarifai = require('clarifai');\nconst app = new Clarifai.App({apiKey: 'bd8644854b19417dacdfa3adba21aab1'});\n//Convert Hex to RGB functions\nfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)};\nfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)};\nfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)};\nfunction cutHex(h) {return (h.charAt(0)===\"#\") ? h.substring(1,7):h};\n// Convert RGB to Hex functions\nfunction rgbToHex(R,G,B) {return \"#\"+toHex(R)+toHex(G)+toHex(B)};\nfunction toHex(n) {\n n = parseInt(n,10);\n if (isNaN(n)) return \"00\";\n n = Math.max(0,Math.min(n,255));\n return \"0123456789ABCDEF\".charAt((n-n%16)/16)\n      + \"0123456789ABCDEF\".charAt(n%16);\n};\n\n// Califai API Call\nexport const analyzeImage = (url) => dispatch => {\n  app.models.predict(\"eeed0b6733a644cea07cf4c60f87ebb7\", url)\n  .then(function(response) {\n      const hexColors = [];\n      response.outputs[0].data.colors.map(color => {\n        return hexColors.push(color.raw_hex.slice(1, color.raw_hex.length));\n      });\n      fetch('/api/colormind?colors=' + hexColors)\n        .then(res => res.json())\n        .then(function (response) {\n          let RGBtoHexData = [];\n          let colorMindResponse = response;\n          for (let i = 0; i < colorMindResponse.length; i++) {\n            RGBtoHexData.push({\n              hexColor: rgbToHex(colorMindResponse[i][0], colorMindResponse[i][1], colorMindResponse[i][2]),\n              alpha: 1\n            });\n          }\n        // console.log(RGBtoHexData);\n        dispatch({\n          type: 'ANALYZE_IMAGE',\n          payload: RGBtoHexData\n        });\n      })\n    })\n    .catch(err => {\n      console.log(err);\n      dispatch({\n        type: 'ANALYZE_IMAGE_ERROR',\n        error: err.data.status.details\n    });\n  })\n};\n\n//add error handling\nexport const sendColorInfo = (hexColor, alpha) => dispatch => {\n  let R = hexToR(hexColor);\n  let G = hexToG(hexColor);\n  let B = hexToB(hexColor);\n  dispatch({\n    type: 'SEND_COLOR_INFO',\n    hexColor: hexColor,\n    R: R,\n    G: G,\n    B: B,\n    alpha: alpha\n  })\n}\n\nexport const clearRecieved = () => dispatch => {\n  dispatch({\n    type: 'CLEAR_RECIEVED',\n    status: ''\n  })\n}\n\n\nexport const sendPositionInfo = (position) => dispatch => {\n  dispatch({\n    type: 'SEND_POSITION_INFO',\n    position: position\n  })\n}\n\nexport const clearPosition = () => dispatch => {\n  dispatch({\n    type: 'CLEAR_POSITION_INFO',\n    position: 0\n  })\n}\n\nexport const clearColorList = () => dispatch => {\n  dispatch({\n    type: 'CLEAR_COLORS',\n    colors: []\n  })\n}\n\nexport const sendSelectedColor = (color) => dispatch => {\n  dispatch({\n    type: 'SELECTED_COLOR',\n    selectedColor: color\n  })\n}\n\nexport const sendAlphaInfo = (alpha) => dispatch => {\n  dispatch({\n    type: 'SEND_ALPHA_INFO',\n    alpha: alpha\n  })\n}\n\nexport const updateHexColor = (newColorSet) => dispatch => {\n  dispatch({\n    type: 'UPDATE_HEX_COLOR',\n    newColorSet: newColorSet\n  })\n}\n\nexport const changeMainImage = url => {\n  return {\n    type: 'MAIN_IMAGE',\n    url: url\n  };\n}\n\nexport const addImageSelection = url => {\n  return {\n    type: 'ADD_URL',\n    url: url\n  };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { sendColorInfo } from '../actions';\nimport { sendPositionInfo } from '../actions';\nimport { sendSelectedColor } from '../actions';\nimport { clearRecieved } from '../actions';\nimport { clearColorList } from '../actions';\nimport { Dimmer, Loader, Grid, Icon } from 'semantic-ui-react';\n\nclass ColorsList extends Component {\n  componentDidMount() {\n    this.props.clearRecieved();\n    // send empty array before recieving new color set\n    this.props.clearColorList();\n    this.props.analyzeImage(this.props.url);\n  };\n  \n  // Make API call each time the URL changes\n  componentDidUpdate(prevProps) {\n    if (this.props.url !== prevProps.url ) {\n      this.props.clearColorList();\n      this.props.analyzeImage(this.props.url);\n    };\n\n    if (this.props.status === 'recieved') {\n      // send the first square color info once information sent\n      // back from API\n      let hexColor = this.props.colors[0].hexColor;\n      let index = this.props.position;\n      let alpha = 1;\n      this.handleOnClickSquare(hexColor, index, alpha);\n      this.props.clearRecieved();\n    }\n  };\n\n  handleOnClickSquare(color, index, alpha) {\n    this.props.sendSelectedColor(color);\n    this.props.sendColorInfo(color, alpha);\n    this.props.sendPositionInfo(index);\n  }\n\n  renderColor(color, alpha) {\n    return {\n      backgroundColor: color,\n      opacity: alpha,\n      cursor: 'pointer'\n    };\n  }\n\n  renderCarot(index) {\n    if (index === this.props.position) {\n      return {\n        color: 'black'\n      };\n    } else {\n      return {\n        color: 'white'\n      };\n    }\n  }\n\n  colorsRender() {\n    // if there is no error in request and colors data is returned\n    if (this.props.colors.length >=1 ) {\n      const ColorsList = this.props.colors.map((color,index) =>\n        <div\n          key={color.hexColor}\n          className=\"color-square-container\"\n        >\n          <div\n            className=\"color-square\"\n            style={this.renderColor(color.hexColor, color.alpha)}\n            onClick={() => this.handleOnClickSquare(color.hexColor, index, color.alpha)}\n          />\n          <div\n            style={this.renderCarot(index)}\n            className=\"carot-container\"\n          >\n            <Icon size=\"big\" name=\"caret up\" />\n          </div>\n        </div>\n      );\n      return(ColorsList);\n    }\n    // otherwise return error statement\n    return (\n      <div className=\"color-loader\" >\n        <Dimmer active inverted>\n          <Loader size='big' inverted>Loading Colors</Loader>\n        </Dimmer>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n    <Grid.Column width={16}>\n      {this.colorsRender()}\n    </Grid.Column>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    colors: state.colors.colors,\n    selectedColor: state.colorInfo.selectedColor,\n    position: state.colorInfo.position,\n    url: state.url.url,\n    error: state.error,\n    status: state.colors.status\n  };\n};\n\nexport default connect(mapStateToProps, {\n  analyzeImage,\n  sendColorInfo,\n  sendPositionInfo,\n  sendSelectedColor,\n  clearRecieved,\n  clearColorList,\n})(ColorsList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Grid, Image } from 'semantic-ui-react';\n\nconst ImageMain = ({url}) => {\n  return(\n    <Grid.Column mobile={16} computer={13}>\n      <Image\n        className=\"sample-img\"\n        src={url}\n        alt=\"analyze main\"\n      />\n    </Grid.Column>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url.url\n  };\n};\n\nexport default connect(mapStateToProps)(ImageMain);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { changeMainImage } from '../actions';\nimport { addImageSelection } from '../actions';\nimport { Button, Modal, Input } from 'semantic-ui-react'\n\nclass AddImgModal extends Component {\n  state = {\n    input: '',\n    open: false,\n    error: false\n  };\n\n  submitURL(event) {\n    event.preventDefault();\n    // add error handle in case of bad url\n    this.props.analyzeImage(this.state.input);\n    this.props.changeMainImage(this.state.input);\n    this.props.addImageSelection(this.state.input);\n    // Clear inputbar on submit\n    this.setState({input: ''});\n    // Close modal\n    this.close();\n  };\n\n  handleInput(event) {\n    this.setState({\n      input: event.target.value,\n      error: false\n    });\n  }\n\n  //if empty Input\n  setError() {\n    this.setState({ error: true });\n  }\n\n  renderURLinput() {\n    // if user clicks confirm with blank title\n    // render red error input\n    if (this.state.error === true) {\n        return(\n          <Input\n            className=\"url-input\"\n            type=\"text\"\n            onChange={event => this.handleInput(event)}\n            value={this.state.input}\n            placeholder=\"Please enter a url...\"\n            error\n           />\n        );\n    }\n    else {\n      //everything else render normal input\n      return(\n        <Input\n          className=\"url-input\"\n          type=\"text\"\n          onChange={event => this.handleInput(event)}\n          value={this.state.input}\n          placeholder=\"Copy and paste image url...\"\n         />\n      );\n    }\n  }\n\n  renderSubmitButton() {\n    if (this.state.input === '') {\n      return(\n        <Button\n          onClick={() => this.setError()}\n          className=\"ui button\"\n          color='blue'\n          style={{ opacity: 0.8 }}\n        >\n          Submit\n        </Button>\n      );\n    } else {\n      return(\n        <Button\n          onClick={event => this.submitURL(event)}\n          className=\"ui button\"\n          color='blue'\n        >\n          Submit\n        </Button>\n      );\n    }\n  }\n\n  // Semantic UI settings\n  close = () => {\n    this.setState({\n      input: '',\n      open: false\n    });\n  }\n\n  closeConfigShow = (closeOnEscape, closeOnDimmerClick) => () => {\n    this.setState({ closeOnEscape, closeOnDimmerClick, open: true });\n  }\n\n  render() {\n    const { open, closeOnEscape, closeOnDimmerClick } = this.state\n      return (\n        <div>\n          <Button onClick={this.closeConfigShow(false, true)}>Try your own image</Button>\n          <Modal\n            open={open}\n            closeOnEscape={closeOnEscape}\n            closeOnDimmerClick={closeOnDimmerClick}\n            onClose={this.close}\n          >\n            <Modal.Content className=\"add-image-modal\">\n              <h3>Try your own image</h3>\n              {this.renderURLinput()}\n              {this.renderSubmitButton()}\n            </Modal.Content>\n          </Modal>\n        </div>\n      )\n    }\n}\n\nexport default connect(null, { analyzeImage, changeMainImage, addImageSelection })(AddImgModal);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { changeMainImage } from '../actions';\nimport { analyzeImage } from '../actions';\nimport { clearRecieved } from '../actions';\nimport { clearPosition } from '../actions';\nimport { Grid } from 'semantic-ui-react';\nimport  ImageModal from './ImageModal';\n\nclass ImageSelection extends Component {\n  handleClick(url) {\n    // first clear the status from API\n    this.props.clearRecieved();\n    // set position to 1\n    this.props.clearPosition();\n    this.props.changeMainImage(url);\n  }\n\n  renderBorder(selectedUrl) {\n    if (this.props.url === selectedUrl) {\n      return {\n        border: '3px solid #0000CC',\n        opacity: 1\n      };\n    } else {\n      return null;\n    }\n  }\n\n  renderImages () {\n    return (\n      this.props.exampleUrl.map(url =>\n        <div\n          className=\"image-wrapper\"\n          key={url}\n        >\n          <img\n            className=\"image-selection\"\n            src={url}\n            alt=\"selection\"\n            style={this.renderBorder(url)}\n            onClick={() => this.handleClick(url)}\n          />\n          <div className=\"circle\">\n            <i\n              id=\"delete-img\"\n              className=\"fas fa-times-circle\"\n            />\n          </div>\n        </div>\n      )\n    );\n  };\n\n  render() {\n    return(\n      <Grid.Column mobile={16} computer={3}>\n        <div className=\"image-modal-container\">\n          <div className=\"images-container\">\n            {this.renderImages()}\n          </div>\n          <div className=\"modal-container\">\n            <ImageModal />\n          </div>\n        </div>\n      </Grid.Column>\n    );\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url.url,\n    exampleUrl: state.url.exampleImages,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeMainImage,\n  clearRecieved,\n  clearPosition,\n  analyzeImage })(ImageSelection);\n","import React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { connect } from 'react-redux';\nimport { updateHexColor } from '../actions';\nimport { sendColorInfo } from '../actions';\nimport { sendAlphaInfo } from '../actions';\nimport { sendSelectedColor } from '../actions';\nimport { Grid } from 'semantic-ui-react'\n\nclass ColorPicker extends Component {\n  handleChange = (color, event) => {\n    let colorPalette = this.props.colors;\n\n    // create new color object\n    let newColor = {\n      hexColor: color.hex.toUpperCase(),\n      alpha: color.rgb.a\n    };\n    \n    //update new item in color array\n    colorPalette[this.props.position] = newColor\n    // send new color pallette, use upppercase for hex colors\n    this.props.updateHexColor(colorPalette);\n    this.props.sendColorInfo(color.hex.toUpperCase());\n    this.props.sendSelectedColor(color.hex.toUpperCase());\n    this.props.sendAlphaInfo(color.rgb.a);\n  }\n\n  renderColorPicker() {\n    if(this.props.colors.length >= 1) {\n      return (\n        <div className=\"color-picker\">\n          <ChromePicker\n            className=\"chrome-picker\"\n            style={{ marginRight: 4 + 'em' }}\n            color={{\n              r: this.props.R,\n              g: this.props.G,\n              b: this.props.B,\n              a: this.props.colors[this.props.position].alpha\n            }}\n            onChange={this.handleChange}\n          />\n        </div>\n      );\n    }\n    return <ChromePicker className=\"color-picker\" />;\n  }\n\n  render() {\n    return(\n      <Grid.Column mobile={16} computer={10}>\n        {this.renderColorPicker()}\n      </Grid.Column>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    hexColor: state.colorInfo.hexColor,\n    R: state.colorInfo.R,\n    G: state.colorInfo.G,\n    B: state.colorInfo.B,\n    a: state.colorInfo.alpha,\n    colors: state.colors.colors,\n    position: state.colorInfo.position\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateHexColor,\n  sendColorInfo,\n  sendSelectedColor,\n  sendAlphaInfo })(ColorPicker);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass ColorInfo extends Component {\n  handleChange(event) {\n    console.log(event.target.value);\n  }\n  render(){\n    return (\n      <div className=\"color-info\">\n       <h5>Hex</h5>\n       <input\n         className=\"hex-info-input\"\n         value={this.props.hexColor}\n       />\n       <p className=\"info-text\">R</p>\n       <p className=\"info-text\">G</p>\n       <p className=\"info-text\">B</p>\n       <p className=\"info-text\">a</p>\n       <div>\n         <input\n           className=\"info-input\"\n           value={this.props.R}\n           onChange={event => this.handleChange(event)}\n         />\n         <input\n           className=\"info-input\"\n           value={this.props.G}\n           onChange={event => this.handleChange(event)}\n         />\n         <input\n           className=\"info-input\"\n           value={this.props.B}\n           onChange={event => this.handleChange(event)}\n         />\n         <input\n           className=\"info-input\"\n           value={this.props.a}\n           onChange={event => this.handleChange(event)}\n         />\n       </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    hexColor: state.colorInfo.hexColor,\n    R: state.colorInfo.R,\n    G: state.colorInfo.G,\n    B: state.colorInfo.B,\n    a: state.colorInfo.alpha,\n    colors: state.colors.colors,\n    position: state.colorInfo.position\n  };\n};\n\nexport default connect(mapStateToProps, { })(ColorInfo);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { analyzeImage } from '../actions';\nimport { clearColorList } from '../actions';\nimport { clearRecieved } from '../actions';\nimport { clearPosition } from '../actions';\nimport { Button } from 'semantic-ui-react';\n\nclass Regenerate extends Component {\n  handleClick(url) {\n    // send empty array before recieving new color set\n    this.props.clearColorList();\n    // first clear the status from API\n    this.props.clearRecieved();\n    // set position to 1\n    this.props.clearPosition();\n    this.props.analyzeImage(url);\n  }\n\n  render() {\n    return (\n      <Button\n        className=\"regen-btn\"\n        content=\"Regenerate\"\n        onClick={() => this.handleClick(this.props.url)}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url.url\n  };\n}\n\nexport default connect(mapStateToProps, {\n  analyzeImage,\n  clearRecieved,\n  clearPosition,\n  clearColorList })(Regenerate);\n","import axios from 'axios';\n// Get user color palettes\nexport const getColors = () => dispatch => {\n  console.log('getting colors');\n  axios.get('/api/colors')\n    .then(res =>\n      dispatch({\n        type: 'GET_COLORS',\n        payload: res.data\n      })\n    )\n    .catch(error =>\n      console.log(error)\n    );\n}\n\n// Add color palettes\nexport const newColorPalette = (colorSet) => dispatch => {\n  axios.post('/api/colors', colorSet)\n    .then(res =>\n      dispatch({\n        type: 'ADD_COLORS',\n        payload: res.data\n      })\n    )\n    .catch(error =>\n      console.log(error)\n    );\n}\n\n// Update color palettes\nexport const updateColorPalette = (id, colorSet) => dispatch => {\n  axios.put(`/api/colors/${id}`, colorSet)\n    .then(res =>\n      dispatch({\n        type: 'UPDATE_COLORS',\n        payload: colorSet\n      })\n    )\n    .catch(error => {\n      console.log(error)\n    })\n    .then(() => {\n      // Make get call to retrieve new set\n      axios.get('/api/colors')\n        .then(res =>\n          dispatch({\n            type: 'GET_COLORS',\n            payload: res.data\n          })\n        )\n        .catch(error =>\n          console.log(error)\n        );\n    })\n}\n\n// Delete user color palettes\nexport const deleteColorPalette = id => dispatch => {\n  axios.delete(`/api/colors/${id}`)\n    .then(res =>\n      dispatch({\n        type: 'DELETE_COLORS',\n        payload: id\n      })\n    )\n    .catch(error =>\n      console.log(error)\n    );\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { newColorPalette } from '../actions/MyPaletteAPI';\nimport { Button, Modal, Input, Header } from 'semantic-ui-react'\n\nclass SavePalette extends Component {\n  state = {\n    input: '',\n    open: false,\n    error: false\n  };\n\n  handleInput (event) {\n    // set error to false as long as there's user input\n    this.setState({\n      input: event.target.value,\n      error: false\n    });\n  }\n  \n  // Modal Settings\n  closeConfigShow = (closeOnEscape, closeOnDimmerClick) => () => {\n  this.setState({ closeOnEscape, closeOnDimmerClick, open: true })\n  }\n\n  close = () => {\n    // reset to default state on close\n    this.setState({\n      input: '',\n      open: false,\n      error: false\n    });\n  }\n\n  // Send new color set to database\n  handleConfirmClick() {\n    this.props.newColorPalette({\n      title: this.state.input,\n      colors: this.props.colors\n    })\n    this.close();\n  }\n\n  //if empty Input\n  setError() {\n    this.setState({\n      error: true\n    });\n  }\n\n  renderConfirmButton() {\n    // set error to true if empty title input\n    if (this.state.input === '') {\n      return (\n        <Button onClick={() => this.setError()}\n          color='blue'\n          style={{ opacity: 0.8 }}\n        >\n          Create New\n        </Button>\n      );\n    } else {\n      return(\n        <Link to=\"/MyPallettes\">\n          <Button\n            color='blue'\n            style={{ marginLeft: .75 + 'em'}}\n            onClick={() => this.handleConfirmClick()}\n          >\n            Create New\n          </Button>\n        </Link>\n      );\n    }\n  }\n\n  renderTitleInput() {\n    // if user clicks confirm with blank title\n    // render red error input\n    if (this.state.error === true) {\n        return(\n          <Input\n            className=\"savepalette-modal-input\"\n            label=\"Title\"\n            value={this.state.input}\n            onChange={event => this.handleInput(event)}\n            placeholder='Title Required...'\n            error\n          />\n        );\n    }\n    else {\n      //everything else render normal input\n      return(\n        <Input\n          className=\"savepalette-modal-input\"\n          label=\"Title\"\n          value={this.state.input}\n          onChange={event => this.handleInput(event)}\n          placeholder='New Palette Name...'\n        />\n      );\n    }\n  }\n\n  colorsRender() {\n    const ColorsList = this.props.colors.map((color,index) =>\n      <div key={color.hexColor} className=\"color-square-container\">\n        <div\n          className=\"color-square\"\n          style={{\n            backgroundColor: color.hexColor,\n            opacity: color.alpha\n          }}\n        />\n        <p>{color.hexColor}</p>\n      </div>\n    );\n    return(ColorsList);\n  }\n\n  render() {\n    const { open, closeOnEscape, closeOnDimmerClick } = this.state\n\n    return (\n      <div>\n        <Button onClick={this.closeConfigShow(true, false)}>Save Palette</Button>\n        <Modal\n          open={open}\n          closeOnEscape={closeOnEscape}\n          closeOnDimmerClick={closeOnDimmerClick}\n          onClose={this.close}\n        >\n          <Modal.Content>\n            <Header as=\"h2\">\n              Save Palette\n            </Header>\n            {this.renderTitleInput()}\n            <div className=\"colors-render\">\n              {this.colorsRender()}\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button onClick={() => this.close()}>Cancel</Button>\n            {this.renderConfirmButton()}\n          </Modal.Actions>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    colors: state.colors.colors,\n  };\n};\n\nexport default connect(mapStateToProps, { newColorPalette })(SavePalette);\n","import React from 'react';\n\nconst Footer = ({url}) => {\n  return(\n    <div className=\"footer\">\n      © 2019\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport HomePageHeader from './HomePageHeader';\nimport ColorsList from './ColorsList';\nimport ImageMain from './ImageMain';\nimport ImageSelection from './ImageSelection';\nimport ColorPicker from './ColorPicker';\nimport ColorInfo from './ColorInfo';\nimport Regenerate from './Regenerate';\nimport SavePalette from './SavePalette';\nimport Footer from './Footer';\nimport { Container, Grid } from 'semantic-ui-react';\n\nconst HomePage = () => {\n  return (\n    <div className=\"HomePage\">\n      <Container textAlign='center'>\n        <HomePageHeader />\n        <Grid celled>\n          <Grid.Row>\n            <ImageSelection />\n            <ImageMain />\n          </Grid.Row>\n        </Grid>\n        <Grid celled>\n          <Grid.Row>\n            <ColorsList />\n          </Grid.Row>\n        </Grid>\n        <Grid celled>\n          <Grid.Row>\n            <ColorPicker />\n            <Grid.Column mobile={16} computer={6}>\n              <ColorInfo />\n              <div className=\"regen-save-buttons\">\n                <Regenerate />\n                <SavePalette />\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        <Footer />\n      </Container>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Confirm, Icon } from 'semantic-ui-react';\nimport { deleteColorPalette } from '../actions/MyPaletteAPI';\n\nclass ConfirmDelete extends Component {\n  state = {\n    open: false\n  };\n\n  show = () => {\n    this.setState({\n      open: true\n    });\n  }\n\n  handleConfirm = () => {\n    // Item also removed via state\n    this.props.deleteColorPalette(this.props.objectID);\n    this.setState({\n      open: false\n    });\n  }\n\n  handleCancel = () => {\n    this.setState({\n      open: false\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"confirm-delete-modal\">\n        <Icon\n          size='large'\n          onClick={this.show}\n          name=\"trash alternate\"\n        />\n        <Confirm\n          open={this.state.open}\n          content={`Are you sure you want to delete ${this.props.title} palette?`}\n          onCancel={this.handleCancel}\n          onConfirm={this.handleConfirm}\n          size=\"small\"\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    deleteColor: state.myPalettes.DeleteColor,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  deleteColorPalette\n})(ConfirmDelete);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ChromePicker } from 'react-color';\nimport { Button, Modal, Icon, Input, Grid, Segment } from 'semantic-ui-react';\nimport { updateColorPalette } from '../actions/MyPaletteAPI';\nimport { sendPositionInfo } from '../actions';\nimport { sendSelectedColor } from '../actions';\nimport { sendColorInfo } from '../actions';\nimport { clearPosition } from '../actions';\nimport { sendAlphaInfo } from '../actions';\nimport { getColors } from '../actions/MyPaletteAPI';\nimport ColorInfo from './ColorInfo';\n\nclass EditModal extends Component {\n  state = {\n    open: false,\n    title: '',\n    selectedSet: [],\n  };\n\n  componentDidMount() {\n    // send info to local state initially\n    this.setState({\n      title: this.props.title,\n      selectedSet: this.props.data[this.props.colorPosition].colors\n    });\n    this.props.clearPosition();\n  }\n\n  handleInput(event) {\n    this.setState({\n      title: event.target.value\n    });\n  }\n\n  cancel = () => {\n    // send original info if canceled\n    this.setState({\n      open: false,\n      title: this.props.title,\n      selectedSet: this.props.data[this.props.colorPosition].colors\n    });\n    this.props.clearPosition();\n    // reset data by calling from database if canceled\n    this.props.getColors();\n  }\n\n  handleConfirm = () => {\n    this.setState({\n      open: false,\n    });\n    const UpdateData = {\n      title: this.state.title,\n      colors: this.state.selectedSet\n    };\n    this.props.updateColorPalette(this.props.objectID, UpdateData);\n    this.props.clearPosition();\n  }\n\n  handleOnClickSquare(color, index, alpha) {\n    this.props.sendSelectedColor(color);\n    this.props.sendColorInfo(color, alpha);\n    this.props.sendPositionInfo(index);\n  }\n\n  handleChange = (color, event) => {\n    let colorPalette = this.state.selectedSet;\n    // create new color object\n    let newColor = {\n      hexColor: color.hex.toUpperCase(),\n      alpha: color.rgb.a\n    };\n    // update new item in color array\n    colorPalette[this.props.position] = newColor\n    // // set new color square in local state\n    this.setState({\n      selectedSet: colorPalette\n    })\n    // update color info in display\n    this.props.sendColorInfo(color.hex.toUpperCase());\n    this.props.sendSelectedColor(color.hex.toUpperCase());\n    this.props.sendAlphaInfo(color.rgb.a);\n  }\n\n  renderColorPicker() {\n    return (\n      <ChromePicker\n        className=\"chrome-picker\"\n        style={{ marginRight: 4 + 'em' }}\n        color={{\n          r: this.props.R,\n          g: this.props.G,\n          b: this.props.B,\n          a: this.props.alpha\n        }}\n        onChange={this.handleChange}\n      />\n    );\n  }\n\n  renderOneColorSet() {\n    const colorSet = this.state.selectedSet.map((color, index) =>\n      <div className=\"color-square-container\" key={color.hexColor}>\n        <div\n          className=\"color-square\"\n          onClick={() => this.handleOnClickSquare(color.hexColor, index, color.alpha)}\n          style={{\n            backgroundColor: color.hexColor,\n            opacity: color.alpha,\n            cursor: 'pointer'\n          }}\n        />\n        <div\n          style={this.renderCarot(index)}\n          className=\"carot-container\"\n        >\n          <Icon size=\"big\" name=\"caret up\" />\n        </div>\n      </div>\n     );\n     return colorSet;\n  }\n\n  renderCarot(index) {\n    if (index === this.props.position) {\n      return {\n        color: 'black'\n      };\n    } else {\n      return {\n        color: 'white'\n      };\n    }\n  }\n\n  //Semantic UI configeration\n  closeConfigShow = (closeOnEscape, closeOnDimmerClick) => () => {\n    this.setState({\n      closeOnEscape,\n      closeOnDimmerClick,\n      open: true,\n    });\n    // send color info for first square when model opens\n    this.props.sendColorInfo(this.state.selectedSet[0].hexColor, this.state.selectedSet[0].alpha);\n  }\n\n  render() {\n    const { open, closeOnEscape, closeOnDimmerClick, title } = this.state\n    return (\n      <div className=\"edit-modal\">\n        <Icon\n          size='large'\n          onClick={this.closeConfigShow(false, true)}\n          name=\"edit\"\n        />\n        <Modal\n          open={open}\n          closeOnEscape={closeOnEscape}\n          closeOnDimmerClick={closeOnDimmerClick}\n          onClose={this.close}\n        >\n          <Modal.Header>Edit Palette</Modal.Header>\n          <Modal.Content>\n            <Input\n              className=\"savepalette-modal-input\"\n              label=\"Title\"\n              value={title}\n              onChange={event => this.handleInput(event)}\n              placeholder='Edit Palette Name...'\n            />\n            <div className=\"colors-render\">\n              {this.renderOneColorSet()}\n            </div>\n            <Grid stackable columns={2}>\n              <Grid.Column width={10}>\n                <Segment>\n                  {this.renderColorPicker()}\n                </Segment>\n              </Grid.Column>\n              <Grid.Column width={6}>\n                <Segment>\n                  <ColorInfo />\n                </Segment>\n              </Grid.Column>\n            </Grid>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button onClick={this.cancel}>\n              Cancel\n            </Button>\n            <Button\n              onClick={this.handleConfirm}\n              color='blue'\n            >\n              Confirm\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.myPalettes.Data,\n    position: state.colorInfo.position,\n    hexColor: state.colorInfo.hexColor,\n    R: state.colorInfo.R,\n    G: state.colorInfo.G,\n    B: state.colorInfo.B,\n    alpha: state.colorInfo.alpha,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateColorPalette,\n  sendPositionInfo,\n  sendSelectedColor,\n  sendColorInfo,\n  sendAlphaInfo,\n  clearPosition,\n  getColors\n})(EditModal);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Header, Container, Grid } from 'semantic-ui-react';\nimport { getColors } from '../actions/MyPaletteAPI';\nimport ConfirmDeleteModal from './ConfirmDeleteModal';\nimport EditModal from './EditModal';\n\nclass MyPallettes extends Component {\n  componentDidMount() {\n    this.props.getColors();\n  }\n\n  //Renders one set of 5 colors then insert into renderPalettes()\n  renderOneColorSet(colors) {\n    const colorSet = colors.map(color =>\n      <div className=\"color-square-container\" key={color.hexColor}>\n        <div\n          className=\"color-square\"\n          style={{\n            backgroundColor: color.hexColor,\n            opacity: color.alpha\n          }}\n        />\n      </div>\n     );\n     return colorSet;\n  }\n\n  renderPalettes() {\n    if (this.props.myPalettes !== undefined) {\n      const Palettes = this.props.myPalettes.map((palette, index) =>\n        <Grid.Column\n          key={palette._id}\n          mobile={16}\n          computer={8}\n        >\n          <div className=\"palette-container\">\n            <p>\n              {palette.title}\n              <ConfirmDeleteModal\n                title={palette.title}\n                objectID={palette._id}\n              />\n              <EditModal\n                title={palette.title}\n                objectID={palette._id}\n                colorPosition={index}\n                selectedSet={palette.colors}\n              />\n            </p>\n            {this.renderOneColorSet(palette.colors)}\n          </div>\n        </Grid.Column>\n      );\n      return Palettes;\n    }\n  }\n\n  render() {\n    return(\n      <Container>\n        <Header as=\"h1\" className=\"header\">\n          My Color Palettes\n        </Header>\n        <Grid>\n          {this.renderPalettes()}\n        </Grid>\n      </Container>\n\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    myPalettes: state.myPalettes.Data,\n    addColor: state.myPalettes.AddColor,\n    updateColor: state.myPalettes.UpdateColor\n  };\n};\n\nexport default connect (mapStateToProps, { getColors })(MyPallettes);\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nconst AboutPage = () => {\n  return(\n    <Header as=\"h1\" className=\"header\">\n      About this App\n    </Header>\n  );\n}\n\nexport default AboutPage;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport HeaderMenu from './HeaderMenu';\nimport HomePage from './HomePage';\nimport MyPallettes from './MyPallettes';\nimport AboutPage from './AboutPage';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <BrowserRouter>\n          <HeaderMenu />\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/MyPallettes\" component={MyPallettes} />\n          <Route path=\"/About\" component={AboutPage} />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const initialState = {\n  colors: [],\n  status: ''\n}\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'ANALYZE_IMAGE':\n      return {...state,\n        colors: action.payload,\n        status: 'recieved'\n      };\n    case 'CLEAR_RECIEVED':\n      return {...state,\n        status: action.status,\n      };\n    case 'CLEAR_COLORS':\n      return {...state,\n        colors: action.colors\n      };\n    case 'UPDATE_HEX_COLOR':\n      function updateObjectInArray(array, action) {\n        return array.map((item, index) => {\n          if (index !== action.index) {\n            // This isn't the item we care about - keep it as-is\n            return item\n          }\n          // Otherwise, this is the one we want - return an updated value\n          return {\n            ...item,\n            ...action.item\n          }\n        })\n      }\n      return {...state,\n          colors: updateObjectInArray(state.colors, action.newColorSet)\n        };\n    default:\n     return state;\n  }\n};\n","const initialState = {\n  url: 'https://images.unsplash.com/photo-1520633946251-dcf52b0276b9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80',\n  exampleImages: [\n    'https://images.unsplash.com/photo-1520633946251-dcf52b0276b9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80',\n    'https://images.unsplash.com/photo-1429497612798-1f189166a08a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80',\n    'https://images.unsplash.com/photo-1493804714600-6edb1cd93080?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80'\n  ],\n};\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'MAIN_IMAGE':\n     return {\n       ...state,\n       url: action.url\n     };\n     case 'RANDOM_IMAGE':\n      return {\n        ...state,\n        url: action.url,\n        random_url: action.url\n      };\n      case 'ADD_URL':\n       return {\n         ...state,\n         exampleImages: state.exampleImages.concat(action.url)\n       };\n       // case 'REMOVE_IMG':\n       //  return {\n       //    ...state,\n       //    exampleImages: state.exampleImages.concat(action.url)\n       //  };\n    default:\n     return state;\n  }\n};\n","const initialState = {\n  hexColor: '',\n  R: '',\n  G: '',\n  B: '',\n  alpha: '',\n  position: 0,\n  selectedColor: ''\n}\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'SEND_COLOR_INFO':\n      return {...state,\n        hexColor: action.hexColor,\n        R: action.R,\n        G: action.G,\n        B: action.B,\n        alpha: action.alpha\n      };\n      case 'SEND_POSITION_INFO':\n        return {...state,\n          position: action.position\n        };\n      case 'CLEAR_POSITION_INFO':\n        return {...state,\n          position: action.position\n          };\n      case 'SEND_ALPHA_INFO':\n        return {...state,\n          alpha: action.alpha\n        };\n      case 'SELECTED_COLOR':\n        return {...state,\n          selectedColor: action.selectedColor\n        };\n    default:\n     return state;\n  }\n};\n","const initialState = {\n  Data: [],\n  AddColor: '',\n  DeleteColor: '',\n  UpdateColor: '',\n};\n\nexport default (state = initialState, action) => {\n  switch(action.type) {\n    case 'GET_COLORS':\n      return {\n        ...state,\n        Data: action.payload\n      };\n     case 'ADD_COLORS':\n      return {\n        ...state,\n        Data: state.Data.concat(action.payload),\n        AddColor: `\"${action.payload.title}\" Created ${action.payload._id}`\n      };\n      case 'UPDATE_COLORS':\n        return {\n          ...state,\n          UpdateColor: `${action.payload} is the new update`\n        };\n      case 'DELETE_COLORS':\n        return {\n          ...state,\n          Data: state.Data.filter(item => item._id !== action.payload),\n          DeleteColor: `${action.payload} was Deleted`\n        };\n    default:\n     return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport clarifaiReducer from './clarifaiReducer';\nimport clarifaiErrorReducer from './clarifaiErrorReducer';\nimport imageUrlReducer from './imageUrlReducer';\nimport colorInfoReducer from './colorInfoReducer';\nimport colorPaletteReducer from './colorPaletteReducer';\n\nexport default combineReducers({\n  colors: clarifaiReducer,\n  error: clarifaiErrorReducer,\n  url: imageUrlReducer,\n  colorInfo: colorInfoReducer,\n  myPalettes: colorPaletteReducer\n});\n","export default (state = [], action) => {\n  switch(action.type) {\n    case 'ANALYZE_IMAGE_ERROR':\n      return action.error\n    default:\n     return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}